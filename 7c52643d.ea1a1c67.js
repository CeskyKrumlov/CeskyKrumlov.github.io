(window.webpackJsonp=window.webpackJsonp||[]).push([[254],{311:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return l})),t.d(n,"rightToc",(function(){return c})),t.d(n,"default",(function(){return b}));var r=t(2),a=t(6),o=(t(0),t(566)),i={id:"12.threadPool",title:"\u7ebf\u7a0b\u6c60",hide_title:!0},l={unversionedId:"juc/12.threadPool",id:"juc/12.threadPool",isDocsHomePage:!1,title:"\u7ebf\u7a0b\u6c60",description:"\u7ebf\u7a0b\u6c60",source:"@site/docs/juc/12.\u7ebf\u7a0b\u6c60.md",slug:"/juc/12.threadPool",permalink:"/docs/juc/12.threadPool",version:"current",sidebar:"someSidebar",previous:{title:"\u963b\u585e\u961f\u5217",permalink:"/docs/juc/11.blockingQueue"},next:{title:"ForkJoin",permalink:"/docs/juc/16.forkjoin"}},c=[{value:"\u7ebf\u7a0b\u6c60",id:"\u7ebf\u7a0b\u6c60",children:[]},{value:"\u4e09\u5927\u65b9\u6cd5",id:"\u4e09\u5927\u65b9\u6cd5",children:[]},{value:"ThreadPoolExecutor",id:"threadpoolexecutor",children:[{value:"ThreadPoolExecutor \u81ea\u8eab\u6709\u54ea\u4e9b\u72b6\u6001",id:"threadpoolexecutor-\u81ea\u8eab\u6709\u54ea\u4e9b\u72b6\u6001",children:[]},{value:"ThreadPoolExecutor \u5982\u4f55\u7ef4\u62a4\u5185\u90e8\u7ebf\u7a0b",id:"threadpoolexecutor-\u5982\u4f55\u7ef4\u62a4\u5185\u90e8\u7ebf\u7a0b",children:[{value:"runWokrer() \u4e0e getTask() \u65b9\u6cd5",id:"runwokrer-\u4e0e-gettask-\u65b9\u6cd5",children:[]}]},{value:"ThreadPoolExecutor \u5982\u4f55\u5904\u7406\u63d0\u4ea4\u4efb\u52a1",id:"threadpoolexecutor-\u5982\u4f55\u5904\u7406\u63d0\u4ea4\u4efb\u52a1",children:[{value:"execute \u65b9\u6cd5",id:"execute-\u65b9\u6cd5",children:[]},{value:"addWorker \u65b9\u6cd5",id:"addworker-\u65b9\u6cd5",children:[]}]}]},{value:"\u4e03\u5927\u53c2\u6570",id:"\u4e03\u5927\u53c2\u6570",children:[{value:"\u6838\u5fc3\u7ebf\u7a0b\u6c60",id:"\u6838\u5fc3\u7ebf\u7a0b\u6c60",children:[]},{value:"\u6700\u5927\u7ebf\u7a0b\u6c60\u5927\u5c0f",id:"\u6700\u5927\u7ebf\u7a0b\u6c60\u5927\u5c0f",children:[]},{value:"\u963b\u585e\u961f\u5217",id:"\u963b\u585e\u961f\u5217",children:[]},{value:"\u5b58\u6d3b\u65f6\u95f4",id:"\u5b58\u6d3b\u65f6\u95f4",children:[]},{value:"\u65f6\u95f4\u5355\u4f4d",id:"\u65f6\u95f4\u5355\u4f4d",children:[]},{value:"\u7ebf\u7a0b\u5de5\u5382",id:"\u7ebf\u7a0b\u5de5\u5382",children:[]},{value:"\u62d2\u7edd\u7b56\u7565",id:"\u62d2\u7edd\u7b56\u7565",children:[]}]},{value:"\u56db\u79cd\u62d2\u7edd\u7b56\u7565",id:"\u56db\u79cd\u62d2\u7edd\u7b56\u7565",children:[]},{value:"\u4f7f\u7528\u539f\u751fThreadPoolExecutor\u521b\u5efa\u7ebf\u7a0b\u6c60",id:"\u4f7f\u7528\u539f\u751fthreadpoolexecutor\u521b\u5efa\u7ebf\u7a0b\u6c60",children:[]},{value:"CPU\u5bc6\u96c6\u578b | IO\u5bc6\u96c6\u578b",id:"cpu\u5bc6\u96c6\u578b--io\u5bc6\u96c6\u578b",children:[{value:"\u6700\u5927\u7ebf\u7a0b\u6570\u5982\u4f55\u5b9a\u4e49",id:"\u6700\u5927\u7ebf\u7a0b\u6570\u5982\u4f55\u5b9a\u4e49",children:[]}]}],u={rightToc:c};function b(e){var n=e.components,i=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},u,i,{components:n,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"\u7ebf\u7a0b\u6c60"},"\u7ebf\u7a0b\u6c60"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"\u4e09\u79cd\u65b9\u6cd5\u3001\u4e03\u5927\u53c2\u6570\u3001\u56db\u79cd\u62d2\u7edd\u7b56\u7565"))),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"\u4f7f\u7528\u7ebf\u7a0b\u6c60\u7684\u4f18\u70b9")),Object(o.b)("ol",{parentName:"blockquote"},Object(o.b)("li",{parentName:"ol"},"\u964d\u4f4e\u7cfb\u7edf\u7684\u8d44\u6e90\u5f00\u9500\u3001\u63d0\u9ad8\u7cfb\u7edf\u54cd\u5e94\u901f\u5ea6",Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"\u964d\u4f4e\u7ebf\u7a0b\u521b\u5efa\u56de\u6536\u9891\u7387\uff0c\u5728 1:1 \u7ebf\u7a0b\u6a21\u578b\u4e0b\uff0c\u51cf\u5c11\u64cd\u4f5c\u7cfb\u7edf\u64cd\u4f5c\u7ebf\u7a0b\u5e26\u6765\u7684\u5ef6\u8fdf"),Object(o.b)("li",{parentName:"ul"},"\u9632\u6b62\u5f00\u53d1\u4eba\u5458\u65e0\u610f\u8bc6\u9891\u7e41\u521b\u5efa\u7ebf\u7a0b\u8017\u5c3d\u7cfb\u7edf\u8d44\u6e90"))),Object(o.b)("li",{parentName:"ol"},"\u65b9\u4fbf\u7ebf\u7a0b\u7684\u7ba1\u7406",Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"\u7ef4\u62a4\u7ebf\u7a0b\u72b6\u6001\uff08ID\u7b49\uff09"),Object(o.b)("li",{parentName:"ul"},"\u7ef4\u62a4\u4efb\u52a1\u6267\u884c\u72b6\u6001")))),Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"\u7ebf\u7a0b\u590d\u7528\u3001\u6700\u5927\u5e76\u53d1\u6570\u3001\u7ba1\u7406\u7ebf\u7a0b"))),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"\u4f7f\u7528\u7ebf\u7a0b\u6c60\u540e\uff0c\u4e0d\u518d\u4f7f\u7528",Object(o.b)("inlineCode",{parentName:"strong"},"new Thread()"),"\u7684\u65b9\u5f0f\u521b\u5efa\u7ebf\u7a0b\uff0c\u800c\u662f\u4f7f\u7528\u7ebf\u7a0b\u6c60\u521b\u5efa\u7ebf\u7a0b"))),Object(o.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(o.b)("div",Object(r.a)({parentName:"div"},{className:"admonition-heading"}),Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",Object(r.a)({parentName:"h5"},{className:"admonition-icon"}),Object(o.b)("svg",Object(r.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"}),Object(o.b)("path",Object(r.a)({parentName:"svg"},{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"})))),"\u963f\u91cc\u5df4\u5df4Java\u7f16\u7a0b\u89c4\u7ea6")),Object(o.b)("div",Object(r.a)({parentName:"div"},{className:"admonition-content"}),Object(o.b)("p",{parentName:"div"},"\u7ebf\u7a0b\u6c60\u4e0d\u5141\u8bb8\u4f7f\u7528",Object(o.b)("inlineCode",{parentName:"p"},"Executors"),"\u521b\u5efa\uff0c\u800c\u662f\u901a\u8fc7",Object(o.b)("inlineCode",{parentName:"p"},"ThreadPoolExecutor"),"\u7684\u65b9\u5f0f\uff0c\u8fd9\u6837\u7684\u5904\u7406\u65b9\u5f0f\u8ba9\u5199\u7684\u540c\u5b66\u66f4\u52a0\u660e\u786e\u7ebf\u7a0b\u6c60\u7684\u8fd0\u884c\u89c4\u5219\uff0c\u89c4\u907f\u8d44\u6e90\u6d88\u8017\u7684\u98ce\u9669"),Object(o.b)("ol",{parentName:"div"},Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"FixedThreadPool"),"\u548c",Object(o.b)("inlineCode",{parentName:"p"},"SingleThreadPool")),Object(o.b)("p",{parentName:"li"},"\u5141\u8bb8\u7684\u8bf7\u6c42\u961f\u5217\u957f\u5ea6\u4e3a",Object(o.b)("inlineCode",{parentName:"p"},"Integer_MAX_VALUE"),"\uff0c\u53ef\u80fd\u4f1a\u5806\u79ef\u5927\u91cf\u7684\u8bf7\u6c42\uff0c\u4ece\u800c\u5bfc\u81f4OOM")),Object(o.b)("li",{parentName:"ol"},Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"CacheedThreadPool"),"\u548c",Object(o.b)("inlineCode",{parentName:"p"},"ScheduledThreadPool")),Object(o.b)("p",{parentName:"li"},"\u5141\u8bb8\u7684\u521b\u5efa\u6570\u91cf\u4e3a",Object(o.b)("inlineCode",{parentName:"p"},"integer_MAX_VALUE"),"\uff0c\u53ef\u80fd\u4f1a\u521b\u5efa\u5927\u91cf\u7684\u7ebf\u7a0b\uff0c\u4ece\u800c\u5bfc\u81f4OOM"))))),Object(o.b)("h1",{id:"\u4e09\u5927\u65b9\u6cd5"},"\u4e09\u5927\u65b9\u6cd5"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Executors\u7684\u4e09\u5927\u65b9\u6cd5")),Object(o.b)("ul",{parentName:"blockquote"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"newSingleThreadExecutor()"),"\u2014\u2014\u5355\u7ebf\u7a0b\u7ebf\u7a0b\u6c60")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"newFixedThreadPool(int)"),"\u2014\u2014\u56fa\u5b9a\u6570\u91cf\u7ebf\u7a0b\u7684\u7ebf\u7a0b\u6c60")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"newCachedThreadPool()"),"\u2014\u2014\u53ef\u4f38\u7f29\u7ebf\u7a0b\u6c60")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"\u521b\u5efa\u7ebf\u7a0b\uff1a")),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"\u540c\u6b65")),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"executorService.execute(Runnable runnable)\n")),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"\u5f02\u6b65")),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"executorService.submit(Runnable runnable)\n"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"\u5173\u95ed\u7ebf\u7a0b\u6c60\uff1a")," ",Object(o.b)("inlineCode",{parentName:"p"},"executorService.shutDown()"))))),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"SingleThreadExecutor")),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'@Test\npublic void test1() {\n    ExecutorService threadPool = Executors.newSingleThreadExecutor();\n  \n    try {\n      for (int i = 0; i < 10; i++) {\n        threadPool.execute(() -> {\n          System.out.println(Thread.currentThread().getName() + " is running");\n        });\n      }\n    } catch (Exception e) {\n      e.printStackTrace();\n    } finally {\n      // \u5173\u95ed\u7ebf\u7a0b\u6c60\n      threadPool.shutdown();\n    }\n}\n')),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),"pool-1-thread-1 is running\npool-1-thread-1 is running\npool-1-thread-1 is running\npool-1-thread-1 is running\npool-1-thread-1 is running\npool-1-thread-1 is running\npool-1-thread-1 is running\npool-1-thread-1 is running\npool-1-thread-1 is running\npool-1-thread-1 is running\n")),Object(o.b)("p",null,"\u53ef\u4ee5\u770b\u5230\u786e\u5b9e\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"FixedThreadPool")),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'@Test\npublic void test2() {\n    ExecutorService threadPool = Executors.newFixedThreadPool(9);\n  \n    try {\n      for (int i = 0; i < 10; i++) {\n        threadPool.execute(() -> {\n          System.out.println(Thread.currentThread().getName() + " is running");\n        });\n      }\n    } catch (Exception e) {\n      e.printStackTrace();\n    } finally {\n      // \u5173\u95ed\u7ebf\u7a0b\u6c60\n      threadPool.shutdown();\n    }\n}\n')),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),"pool-1-thread-1 is running\npool-1-thread-2 is running\npool-1-thread-3 is running\npool-1-thread-4 is running\npool-1-thread-5 is running\npool-1-thread-6 is running\npool-1-thread-7 is running\npool-1-thread-8 is running\npool-1-thread-2 is running\npool-1-thread-9 is running\n")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"\u521b\u5efa\u62e5\u67099\u4e2a\u7ebf\u7a0b\u7684\u7ebf\u7a0b\u6c60\uff0c\u5f0010\u4e2a\u7ebf\u7a0b\uff0c\u53d1\u73b0\u7ebf\u7a0b2\u88ab\u590d\u7528\u4e86")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"CachedThreadPool")),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'@Test\npublic void test3() {\n    ExecutorService threadPool = Executors.newCachedThreadPool();\n  \n    try {\n      for (int i = 0; i < 10; i++) {\n        threadPool.execute(() -> {\n          System.out.println(Thread.currentThread().getName() + " is running");\n        });\n      }\n    } catch (Exception e) {\n      e.printStackTrace();\n    } finally {\n      // \u5173\u95ed\u7ebf\u7a0b\u6c60\n      threadPool.shutdown();\n    }\n}\n')),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),"pool-1-thread-1 is running\npool-1-thread-2 is running\npool-1-thread-3 is running\npool-1-thread-4 is running\npool-1-thread-5 is running\npool-1-thread-5 is running\npool-1-thread-1 is running\npool-1-thread-3 is running\npool-1-thread-2 is running\npool-1-thread-4 is running\n")),Object(o.b)("p",null,"\u53ef\u4ee5\u770b\u5230\u53ef\u4f38\u7f29\u7684",Object(o.b)("inlineCode",{parentName:"p"},"CachedThreadPool"),"\u81ea\u52a8\u521b\u5efa\u4e865\u4e2a\u7ebf\u7a0b\uff0c\u7a0b\u5e8f\u7533\u8bf710\u4e2a\u7ebf\u7a0b\uff0c\u7ebf\u7a0b\u6c60\u4e2d\u76845\u4e2a\u7ebf\u7a0b\u90fd\u88ab\u590d\u7528\u4e86\u4e00\u6b21"),Object(o.b)("br",null),Object(o.b)("h1",{id:"threadpoolexecutor"},"ThreadPoolExecutor"),Object(o.b)("h2",{id:"threadpoolexecutor-\u81ea\u8eab\u6709\u54ea\u4e9b\u72b6\u6001"},"ThreadPoolExecutor \u81ea\u8eab\u6709\u54ea\u4e9b\u72b6\u6001"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"\u7ee7\u627f\u5173\u7cfb"),Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"Executor \u2190 ExecutorService \u2190 AbstractExecutorService \u2190 ThreadPoolExecutor")),Object(o.b)("pre",{parentName:"blockquote"},Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"/**\n* The main pool control state, ctl, is an atomic integer packing\n* two conceptual fields\n*   workerCount, indicating the effective number of threads\n*   runState,    indicating whether running, shutting down etc\n*\n* In order to pack them into one int, we limit workerCount to\n* (2^29)-1 (about 500 million) threads rather than (2^31)-1 (2\n* billion) otherwise representable. If this is ever an issue in\n* the future, the variable can be changed to be an AtomicLong,\n* and the shift/mask constants below adjusted. But until the need\n* arises, this code is a bit faster and simpler using an int.\n*\n* The workerCount is the number of workers that have been\n* permitted to start and not permitted to stop.  The value may be\n* transiently different from the actual number of live threads,\n* for example when a ThreadFactory fails to create a thread when\n* asked, and when exiting threads are still performing\n* bookkeeping before terminating. The user-visible pool size is\n* reported as the current size of the workers set.\n*\n* The runState provides the main lifecycle control, taking on values:\n*\n*   RUNNING:  Accept new tasks and process queued tasks\n*   SHUTDOWN: Don't accept new tasks, but process queued tasks\n*   STOP:     Don't accept new tasks, don't process queued tasks,\n*             and interrupt in-progress tasks\n*   TIDYING:  All tasks have terminated, workerCount is zero,\n*             the thread transitioning to state TIDYING\n*             will run the terminated() hook method\n*   TERMINATED: terminated() has completed\n*\n* The numerical order among these values matters, to allow\n* ordered comparisons. The runState monotonically increases over\n* time, but need not hit each state. The transitions are:\n*\n* RUNNING -> SHUTDOWN\n*    On invocation of shutdown(), perhaps implicitly in finalize()\n* (RUNNING or SHUTDOWN) -> STOP\n*    On invocation of shutdownNow()\n* SHUTDOWN -> TIDYING\n*    When both queue and pool are empty\n* STOP -> TIDYING\n*    When pool is empty\n* TIDYING -> TERMINATED\n*    When the terminated() hook method has completed\n*\n* Threads waiting in awaitTermination() will return when the\n* state reaches TERMINATED.\n*\n* Detecting the transition from SHUTDOWN to TIDYING is less\n* straightforward than you'd like because the queue may become\n* empty after non-empty and vice versa during SHUTDOWN state, but\n* we can only terminate if, after seeing that it is empty, we see\n* that workerCount is 0 (which sometimes entails a recheck -- see\n* below).\n*/\n// \u521d\u59cb\u72b6\u6001\u4e0b\u7ebf\u7a0b\u6c60\u72b6\u6001\u4e3a RUNNING \u5de5\u4f5c\u7ebf\u7a0b\u6570\u4e3a0\nprivate final AtomicInteger ctl = new AtomicInteger(ctlOf(RUNNING, 0));\nprivate static final int COUNT_BITS = Integer.SIZE - 3; // aka 29\nprivate static final int CAPACITY   = (1 << COUNT_BITS) - 1;\n\n// runState is stored in the high-order bits\n// -1\u8865\u7801 11111111 11111111 11111111 11111111\n// -1 << 29 => 11100000 00000000 00000000 00000000\nprivate static final int RUNNING    = -1 << COUNT_BITS; \n// 0 << 29 => 00000000 00000000 00000000 00000000\nprivate static final int SHUTDOWN   =  0 << COUNT_BITS;\n// 1 << 29 => 00100000 00000000 00000000 00000000\nprivate static final int STOP       =  1 << COUNT_BITS;\n// 2 << 29 => 01000000 00000000 00000000 00000000\nprivate static final int TIDYING    =  2 << COUNT_BITS;\n// 3 << 29 => 01100000 00000000 00000000 00000000\nprivate static final int TERMINATED =  3 << COUNT_BITS;\n\n// Packing and unpacking ctl\nprivate static int runStateOf(int c)     { return c & ~CAPACITY; }\nprivate static int workerCountOf(int c)  { return c & CAPACITY; }\nprivate static int ctlOf(int rs, int wc) { return rs | wc; }\n")),Object(o.b)("ul",{parentName:"blockquote"},Object(o.b)("li",{parentName:"ul"},"\u53ef\u4ee5\u770b\u5230\u51e0\u4e2a\u72b6\u6001\u53ea\u7528\u4e86 ",Object(o.b)("inlineCode",{parentName:"li"},"\u6700\u9ad83bit")," \u6765\u8868\u793a\uff0c\u8fd9\u662f\u56e0\u4e3a ThreadPoolExecutor \u53ea\u7528\u4e86\u4e00\u4e2a int \u53d8\u91cf\u6765\u540c\u65f6\u4fdd\u5b58 ",Object(o.b)("inlineCode",{parentName:"li"},"\u7ebf\u7a0b\u6c60\u72b6\u6001")," \u548c ",Object(o.b)("inlineCode",{parentName:"li"},"\u5de5\u4f5c\u7ebf\u7a0b\u6570"),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"\u6700\u9ad83bit\uff1a\u8868\u793a\u7ebf\u7a0b\u6c60\u72b6\u6001"),Object(o.b)("li",{parentName:"ul"},"\u5176\u4f5929bit\uff1a\u5de5\u4f5c\u7ebf\u7a0b\u6570"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"ctl")," \u8fd9\u4e2a\u539f\u5b50\u6574\u578b\u5c31\u7528\u6765\u5b58\u50a8\u4e0a\u8ff0\u4e24\u4e2a\u4fe1\u606f\uff0c",Object(o.b)("inlineCode",{parentName:"li"},"ctlOf()")," \u4e3a\u5b83\u7684\u6784\u9020\u65b9\u6cd5\uff0c\u521d\u59cb\u5316\u662f\u7ebf\u7a0b\u6c60 \u72b6\u6001\u4e3a ",Object(o.b)("inlineCode",{parentName:"li"},"RUNNING"),"\uff0c\u5de5\u4f5c\u7ebf\u7a0b\u6570\u4e3a ",Object(o.b)("inlineCode",{parentName:"li"},"0")),Object(o.b)("li",{parentName:"ul"},"\u72b6\u6001\uff1a",Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"RUNNING"),"\uff1a\u63a5\u6536\u65b0\u4efb\u52a1\uff0c\u4e5f\u80fd\u5904\u7406\u963b\u585e\u961f\u5217\u91cc\u7684\u4efb\u52a1"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"SHUTDOWN"),"\uff1a\u4e0d\u63a5\u6536\u65b0\u4efb\u52a1\uff0c\u4f46\u662f\u5904\u7406\u963b\u585e\u961f\u5217\u91cc\u7684\u4efb\u52a1"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"STOP"),"\uff1a\u4e0d\u63a5\u53d7\u65b0\u4efb\u52a1\uff0c\u4e0d\u5904\u7406\u963b\u585e\u961f\u5217\u4e2d\u7684\u4efb\u52a1\uff0c\u4e2d\u65ad\u5904\u7406\u8fc7\u7a0b\u4e2d\u7684\u4efb\u52a1"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"TIDYING"),"\uff1a\u5f53\u6240\u6709\u4efb\u52a1\u90fd\u6267\u884c\u5b8c\u6bd5\uff0c\u5f53\u524d\u7ebf\u7a0b\u6c60\u5df2\u7ecf\u6ca1\u6709\u5de5\u4f5c\u7ebf\u7a0b\uff0c\u8fd9\u65f6\u7ebf\u7a0b\u6c60\u5c06\u8f6c\u6362\u4e3a TIDYDING \u72b6\u6001\uff0c\u5e76\u5c06\u8c03\u7528 terminated \u65b9\u6cd5"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"TERMINATED"),"\uff1aterminated \u65b9\u6cd5\u8c03\u7528\u5b8c\u6210")))),Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("img",{alt:"image-20210519200040059",src:t(975).default}))),Object(o.b)("h2",{id:"threadpoolexecutor-\u5982\u4f55\u7ef4\u62a4\u5185\u90e8\u7ebf\u7a0b"},"ThreadPoolExecutor \u5982\u4f55\u7ef4\u62a4\u5185\u90e8\u7ebf\u7a0b"),Object(o.b)("blockquote",null,Object(o.b)("h2",Object(r.a)({parentName:"blockquote"},{id:"\u6210\u5458\u53d8\u91cf"}),"\u6210\u5458\u53d8\u91cf"),Object(o.b)("pre",{parentName:"blockquote"},Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"/**\n     * The queue used for holding tasks and handing off to worker\n     * threads.  We do not require that workQueue.poll() returning\n     * null necessarily means that workQueue.isEmpty(), so rely\n     * solely on isEmpty to see if the queue is empty (which we must\n     * do for example when deciding whether to transition from\n     * SHUTDOWN to TIDYING).  This accommodates special-purpose\n     * queues such as DelayQueues for which poll() is allowed to\n     * return null even if it may later return non-null when delays\n     * expire.\n     */\n// \u7528\u4e8e\u5b58\u50a8\u6324\u538b\u7ebf\u7a0b\u7684\u963b\u585e\u961f\u5217\n// \u4e3a\u4ec0\u4e48\u6cdb\u578b\u662f Runnable \uff0c\u56e0\u4e3a \u7236\u7c7b AbstractExecutorService \u4f1a\u628a Callable \u5bf9\u8c61\u8f6c\u6362\u4e3a Runnable \u7684\u5b50\u7c7b FutureTask\nprivate final BlockingQueue<Runnable> workQueue;\n\n/**\n     * Lock held on access to workers set and related bookkeeping.\n     * While we could use a concurrent set of some sort, it turns out\n     * to be generally preferable to use a lock. Among the reasons is\n     * that this serializes interruptIdleWorkers, which avoids\n     * unnecessary interrupt storms, especially during shutdown.\n     * Otherwise exiting threads would concurrently interrupt those\n     * that have not yet interrupted. It also simplifies some of the\n     * associated statistics bookkeeping of largestPoolSize etc. We\n     * also hold mainLock on shutdown and shutdownNow, for the sake of\n     * ensuring workers set is stable while separately checking\n     * permission to interrupt and actually interrupting.\n     */\nprivate final ReentrantLock mainLock = new ReentrantLock();\n\n/**\n     * Set containing all worker threads in pool. Accessed only when\n     * holding mainLock.\n     */\nprivate final HashSet<Worker> workers = new HashSet<Worker>();\n\n/**\n     * Wait condition to support awaitTermination\n     */\nprivate final Condition termination = mainLock.newCondition();\n\n/**\n     * Tracks largest attained pool size. Accessed only under\n     * mainLock.\n     */\nprivate int largestPoolSize;\n\n/**\n     * Counter for completed tasks. Updated only on termination of\n     * worker threads. Accessed only under mainLock.\n     */\nprivate long completedTaskCount;\n\n/*\n     * All user control parameters are declared as volatiles so that\n     * ongoing actions are based on freshest values, but without need\n     * for locking, since no internal invariants depend on them\n     * changing synchronously with respect to other actions.\n     */\n\n/**\n     * Factory for new threads. All threads are created using this\n     * factory (via method addWorker).  All callers must be prepared\n     * for addWorker to fail, which may reflect a system or user's\n     * policy limiting the number of threads.  Even though it is not\n     * treated as an error, failure to create threads may result in\n     * new tasks being rejected or existing ones remaining stuck in\n     * the queue.\n     *\n     * We go further and preserve pool invariants even in the face of\n     * errors such as OutOfMemoryError, that might be thrown while\n     * trying to create threads.  Such errors are rather common due to\n     * the need to allocate a native stack in Thread.start, and users\n     * will want to perform clean pool shutdown to clean up.  There\n     * will likely be enough memory available for the cleanup code to\n     * complete without encountering yet another OutOfMemoryError.\n     */\nprivate volatile ThreadFactory threadFactory;\n\n/**\n     * Handler called when saturated or shutdown in execute.\n     */\nprivate volatile RejectedExecutionHandler handler;\n\n/**\n     * Timeout in nanoseconds for idle threads waiting for work.\n     * Threads use this timeout when there are more than corePoolSize\n     * present or if allowCoreThreadTimeOut. Otherwise they wait\n     * forever for new work.\n     */\nprivate volatile long keepAliveTime;\n\n/**\n     * If false (default), core threads stay alive even when idle.\n     * If true, core threads use keepAliveTime to time out waiting\n     * for work.\n     */\nprivate volatile boolean allowCoreThreadTimeOut;\n\n/**\n     * Core pool size is the minimum number of workers to keep alive\n     * (and not allow to time out etc) unless allowCoreThreadTimeOut\n     * is set, in which case the minimum is zero.\n     */\nprivate volatile int corePoolSize;\n\n/**\n     * Maximum pool size. Note that the actual maximum is internally\n     * bounded by CAPACITY.\n     */\nprivate volatile int maximumPoolSize;\n")),Object(o.b)("ul",{parentName:"blockquote"},Object(o.b)("li",{parentName:"ul"},"\u963b\u585e\u961f\u5217 ",Object(o.b)("inlineCode",{parentName:"li"},"workQueue"),"\uff1a\u6cdb\u578b\u4e3a ",Object(o.b)("inlineCode",{parentName:"li"},"Runnable"),"\uff0c\u5bf9\u4e8e ",Object(o.b)("inlineCode",{parentName:"li"},"Callable"),"\uff0c\u7236\u7c7b AbstractExecutorService \u4f1a\u628a\u5176\u8f6c\u6362\u4e3a Runnable \u7684\u5b50\u7c7b FutureTask"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"mainLock"),"\uff1a\u4e00\u4e2a ReentrantLock\uff0c\u7528\u4e8e\u7ebf\u7a0b\u6c60\u5185\u90e8\u5b8c\u6210\u7ebf\u7a0b\u540c\u6b65\u529f\u80fd"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"workers"),"\uff1a\u4e00\u4e2a HashSet\uff0c\u6cdb\u578b Worker \u7c7b\uff0cWorker \u5185\u90e8\u7c7b\u662f\u5bf9 Thread \u4ee5\u53ca\u4e00\u4e9b\u5176\u4ed6\u72b6\u6001\u7684\u5c01\u88c5\u3002",Object(o.b)("strong",{parentName:"li"},"workers \u662f\u7528\u6765\u5b58\u50a8\u6240\u6709\u5de5\u4f5c\u7ebf\u7a0b\u7684\u96c6\u5408")),Object(o.b)("li",{parentName:"ul"},"Int ",Object(o.b)("inlineCode",{parentName:"li"},"largestPoolSize"),"\uff1a\u7ebf\u7a0b\u6c60\u4e2d\u6700\u591a\u6709\u8fc7\u591a\u5c11\u4e2a\u6d3b\u8dc3\u7ebf\u7a0b"),Object(o.b)("li",{parentName:"ul"},"long ",Object(o.b)("inlineCode",{parentName:"li"},"completedTaskCount"),"\uff1a\u7ebf\u7a0b\u6c60\u603b\u5171\u5904\u7406\u4e86\u591a\u5c11\u4efb\u52a1"),Object(o.b)("li",{parentName:"ul"},"volatile ThreadFactory ",Object(o.b)("inlineCode",{parentName:"li"},"threadFactory"),"\uff1a\u7ebf\u7a0b\u5de5\u5382\uff0c\u53ef\u7531\u7528\u6237\u81ea\u5b9a\u4e49"),Object(o.b)("li",{parentName:"ul"},"volatile RejectedExecutionHandler ",Object(o.b)("inlineCode",{parentName:"li"},"handler"),"\uff1a\u53ef\u6307\u5b9a\u7684\u62d2\u7edd\u7b56\u7565"),Object(o.b)("li",{parentName:"ul"},"volatile long ",Object(o.b)("inlineCode",{parentName:"li"},"keepAliveTime"),"\uff1a\u82e5\u7ebf\u7a0b\u7a7a\u95f2\u5219\u4fdd\u6301\u5b58\u6d3b\u7684\u65f6\u95f4"),Object(o.b)("li",{parentName:"ul"},"volatile boolean ",Object(o.b)("inlineCode",{parentName:"li"},"allowCoreThreadTimeOut"),"\uff1a\u662f\u5426\u4fdd\u6301\u6838\u5fc3\u7ebf\u7a0b\u59cb\u7ec8\u5b58\u6d3b"),Object(o.b)("li",{parentName:"ul"},"volatile int ",Object(o.b)("inlineCode",{parentName:"li"},"corePoolSize"),"\uff1a\u6838\u5fc3\u7ebf\u7a0b\u6570\uff0c\u7a33\u5b9a\u7684\u7ebf\u7a0b\u6570\u76ee"),Object(o.b)("li",{parentName:"ul"},"volatile int ",Object(o.b)("inlineCode",{parentName:"li"},"maximumPoolSize"),"\uff1a\u6700\u5927\u7ebf\u7a0b\u6570\uff1a\u5f53\u6838\u5fc3\u7ebf\u7a0b\u6ee1\u4e86\uff0c\u7ebf\u7a0b\u6c60\u5c06\u4f1a\u5728\u6838\u5fc3\u7ebf\u7a0b\u6570\u7684\u57fa\u7840\u4e0a\u521b\u5efa\u65b0\u7ebf\u7a0b\u6765\u5904\u7406\u4efb\u52a1\uff0c\u76f4\u5230\u6700\u5927\u7ebf\u7a0b\u6570"))),Object(o.b)("blockquote",null,Object(o.b)("h2",Object(r.a)({parentName:"blockquote"},{id:"\u5185\u90e8\u7c7b-worker"}),"\u5185\u90e8\u7c7b Worker"),Object(o.b)("p",{parentName:"blockquote"},"\u7ee7\u627f\u4e86 AQS \u5b9e\u73b0\u4e86 Runnable"),Object(o.b)("ul",{parentName:"blockquote"},Object(o.b)("li",{parentName:"ul"},"\u5b9e\u73b0 Runnbale\uff1a\u56e0\u4e3a worker \u5c31\u662f\u4e00\u4e2a\u7c7b\u4f3c Thread \u7684\u4e1c\u897f\uff0c\u4ee3\u8868\u4e00\u4e2a\u5f02\u6b65\u4efb\u52a1"),Object(o.b)("li",{parentName:"ul"},"\u7ee7\u627f AQS\uff1a\u5f53 worker \u5904\u7406\u8fc7\u7a0b\u4e2d\u63a5\u6536\u5230\u4e2d\u65ad\u6307\u4ee4\u65f6\uff0c\u662f\u7acb\u523b\u9000\u51fa\uff0c\u8fd8\u662f\u7b49\u5f53\u524d\u4efb\u52a1\u6267\u884c\u5b8c\u6bd5\u518d\u9000\u51fa\uff0c\u8fd9\u53ef\u4ee5\u901a\u8fc7\u5bf9 ",Object(o.b)("inlineCode",{parentName:"li"},"\u72b6\u6001")," \u7684\u7ef4\u62a4\u5b9e\u73b0\uff0c\u7ee7\u627f AQS \u5c31\u5177\u6709\u4e86\u9501\u7684\u80fd\u529b")),Object(o.b)("pre",{parentName:"blockquote"},Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"/**\n * Class Worker mainly maintains interrupt control state for\n * threads running tasks, along with other minor bookkeeping.\n * This class opportunistically extends AbstractQueuedSynchronizer\n * to simplify acquiring and releasing a lock surrounding each\n * task execution.  This protects against interrupts that are\n * intended to wake up a worker thread waiting for a task from\n * instead interrupting a task being run.  We implement a simple\n * non-reentrant mutual exclusion lock rather than use\n * ReentrantLock because we do not want worker tasks to be able to\n * reacquire the lock when they invoke pool control methods like\n * setCorePoolSize.  Additionally, to suppress interrupts until\n * the thread actually starts running tasks, we initialize lock\n * state to a negative value, and clear it upon start (in\n * runWorker).\n */\nprivate final class Worker\n    extends AbstractQueuedSynchronizer\n    implements Runnable\n{\n         /** Thread this worker is running in.  Null if factory fails. */\n        final Thread thread;\n        /** Initial task to run.  Possibly null. */\n        Runnable firstTask;\n        /** Per-thread task counter */\n        volatile long completedTasks;\n\n        /**\n         * Creates with given first task and thread from ThreadFactory.\n         * @param firstTask the first task (null if none)\n         */\n        Worker(Runnable firstTask) {\n            // \u7528 -1 \u800c\u4e0d\u662f0\uff0c\u56e0\u4e3a\u5e0c\u671b\u5728\u5b8c\u5168\u6784\u9020\u5b8c\u6bd5\u524d\u4e0d\u63a5\u53d7\u4e2d\u65ad\n            // \u914d\u5408\u6700\u540e\u7684 interruptIfStarted() \u65b9\u6cd5\u5b9e\u73b0\n            setState(-1); // inhibit interrupts until runWorker\n            this.firstTask = firstTask;\n            this.thread = getThreadFactory().newThread(this);\n        }\n\n        /** Delegates main run loop to outer runWorker  */\n        public void run() {\n            runWorker(this); // \u91cd\u70b9\u3001\u6838\u5fc3 \u7a0d\u540e\u518d\u8bf4\n        }\n\n        // Lock methods\n        //\n        // The value 0 represents the unlocked state.\n        // The value 1 represents the locked state.\n\n        protected boolean isHeldExclusively() {\n            return getState() != 0; // AQS\n        }\n\n        protected boolean tryAcquire(int unused) { // AQS\n            if (compareAndSetState(0, 1)) {\n                setExclusiveOwnerThread(Thread.currentThread());\n                return true;\n            }\n            return false;\n        }\n\n        protected boolean tryRelease(int unused) { // AQS\n            setExclusiveOwnerThread(null);\n            setState(0);\n            return true;\n        }\n\n        public void lock()        { acquire(1); } // AQS\n        public boolean tryLock()  { return tryAcquire(1); } // AQS\n        public void unlock()      { release(1); } // AQS\n        public boolean isLocked() { return isHeldExclusively(); } // AQS\n\n        void interruptIfStarted() { // \u8c03\u7528\u540e\u4e2d\u65ad\u5f53\u524d\u5de5\u4f5c\u7ebf\u7a0b\n            Thread t;\n            if (getState() >= 0 && (t = thread) != null && !t.isInterrupted()) {\n                try {\n                    t.interrupt();\n                } catch (SecurityException ignore) {\n                }\n            }\n        }\n}\n"))),Object(o.b)("h3",{id:"runwokrer-\u4e0e-gettask-\u65b9\u6cd5"},"runWokrer() \u4e0e getTask() \u65b9\u6cd5"),Object(o.b)("blockquote",null,Object(o.b)("h2",Object(r.a)({parentName:"blockquote"},{id:"runworkerthis-\u65b9\u6cd5"}),"runWorker(this) \u65b9\u6cd5"),Object(o.b)("ul",{parentName:"blockquote"},Object(o.b)("li",{parentName:"ul"},"\u5904\u7406\u6784\u9020\u51fd\u6570\u4e2d\u7684\u7b2c\u4e00\u4e2a task \u540e\uff0c\u4e0d\u65ad\u4ece\u963b\u585e\u961f\u5217\u4e2d\u83b7\u53d6 task \u5e76\u5904\u7406"),Object(o.b)("li",{parentName:"ul"},"\u6bcf\u5f53\u83b7\u53d6\u4e00\u4e2a\u4efb\u52a1\uff0c\u5c31\u5148\u52a0\u9501\u7136\u540e\u8fdb\u884c\u5904\u7406"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"strong"},"beforeExecute()"),"\u3001",Object(o.b)("inlineCode",{parentName:"strong"},"afterExecute()"),"\u65b9\u6cd5\uff0c\u5728 ThreadPoolExecutor \u4e2d\u65f6 protected \u4fee\u9970\u7684\u7a7a\u5b9e\u73b0\uff0c\u76f8\u5f53\u4e8e\u7ebf\u7a0b\u6c60\u7ed9\u6bcf\u4e2a\u4efb\u52a1\u90fd\u8fdb\u884c\u4e86\u5207\u9762")),Object(o.b)("li",{parentName:"ul"},"\u4e00\u65e6 task \u4e3a null\uff0c\u5c31\u4f1a\u89e6\u53d1 ",Object(o.b)("inlineCode",{parentName:"li"},"processWorkerExit")," \u56de\u6536\u5f53\u524d worker \u7684\u64cd\u4f5c")),Object(o.b)("pre",{parentName:"blockquote"},Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"/**\n     * Main worker run loop.  Repeatedly gets tasks from queue and\n     * executes them, while coping with a number of issues:\n     *\n     * 1. We may start out with an initial task, in which case we\n     * don't need to get the first one. Otherwise, as long as pool is\n     * running, we get tasks from getTask. If it returns null then the\n     * worker exits due to changed pool state or configuration\n     * parameters.  Other exits result from exception throws in\n     * external code, in which case completedAbruptly holds, which\n     * usually leads processWorkerExit to replace this thread.\n     *\n     * 2. Before running any task, the lock is acquired to prevent\n     * other pool interrupts while the task is executing, and then we\n     * ensure that unless pool is stopping, this thread does not have\n     * its interrupt set.\n     *\n     * 3. Each task run is preceded by a call to beforeExecute, which\n     * might throw an exception, in which case we cause thread to die\n     * (breaking loop with completedAbruptly true) without processing\n     * the task.\n     *\n     * 4. Assuming beforeExecute completes normally, we run the task,\n     * gathering any of its thrown exceptions to send to afterExecute.\n     * We separately handle RuntimeException, Error (both of which the\n     * specs guarantee that we trap) and arbitrary Throwables.\n     * Because we cannot rethrow Throwables within Runnable.run, we\n     * wrap them within Errors on the way out (to the thread's\n     * UncaughtExceptionHandler).  Any thrown exception also\n     * conservatively causes thread to die.\n     *\n     * 5. After task.run completes, we call afterExecute, which may\n     * also throw an exception, which will also cause thread to\n     * die. According to JLS Sec 14.20, this exception is the one that\n     * will be in effect even if task.run throws.\n     *\n     * The net effect of the exception mechanics is that afterExecute\n     * and the thread's UncaughtExceptionHandler have as accurate\n     * information as we can provide about any problems encountered by\n     * user code.\n     *\n     * @param w the worker\n     */\nfinal void runWorker(Worker w) {\n    Thread wt = Thread.currentThread();\n    Runnable task = w.firstTask;\n    w.firstTask = null;\n    w.unlock(); // allow interrupts\n    boolean completedAbruptly = true;\n    try {\n        while (task != null || (task = getTask()) != null) { // \u5faa\u73af\u5904\u7406\u963b\u585e\u961f\u5217\u4e2d\u7684\u4efb\u52a1\n            w.lock(); // \u6bcf\u4e2a\u4efb\u52a1\u4e00\u8fdb\u6765\u90fd\u52a0\u9501\n            // If pool is stopping, ensure thread is interrupted;\n            // if not, ensure thread is not interrupted.  This\n            // requires a recheck in second case to deal with\n            // shutdownNow race while clearing interrupt\n            if ((runStateAtLeast(ctl.get(), STOP) ||\n                 (Thread.interrupted() &&\n                  runStateAtLeast(ctl.get(), STOP))) &&\n                !wt.isInterrupted())\n                wt.interrupt();\n            try {\n                beforeExecute(wt, task); // \u5207\u9762\n                Throwable thrown = null;\n                try {\n                    task.run();\n                } catch (RuntimeException x) {\n                    thrown = x; throw x;\n                } catch (Error x) {\n                    thrown = x; throw x;\n                } catch (Throwable x) {\n                    thrown = x; throw new Error(x);\n                } finally {\n                    afterExecute(task, thrown); // \u5207\u9762\n                }\n            } finally {\n                task = null;\n                w.completedTasks++;\n                w.unlock();\n            }\n        }\n        completedAbruptly = false;\n    } finally { // \u91ca\u653e worker\n        processWorkerExit(w, completedAbruptly); // \n    }\n}\n")),Object(o.b)("h3",Object(r.a)({parentName:"blockquote"},{id:"gettask-\u65b9\u6cd5"}),"getTask() \u65b9\u6cd5"),Object(o.b)("pre",{parentName:"blockquote"},Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"/**\n* Performs blocking or timed wait for a task, depending on\n* current configuration settings, or returns null if this worker\n* must exit because of any of:\n* 1. There are more than maximumPoolSize workers (due to\n*    a call to setMaximumPoolSize).\n* 2. The pool is stopped.\n* 3. The pool is shutdown and the queue is empty.\n* 4. This worker timed out waiting for a task, and timed-out\n*    workers are subject to termination (that is,\n*    {@code allowCoreThreadTimeOut || workerCount > corePoolSize})\n*    both before and after the timed wait, and if the queue is\n*    non-empty, this worker is not the last thread in the pool.\n*\n* @return task, or null if the worker must exit, in which case\n*         workerCount is decremented\n*/\nprivate Runnable getTask() {\n    // \u8bb0\u5f55\u4e0a\u4e00\u6b21\u4ece\u963b\u585e\u961f\u5217\u4e2d poll \u4efb\u52a1\u662f\u5426\u8d85\u65f6\n    boolean timedOut = false; // Did the last poll() time out?\n\n    // \u9884\u671f\uff1a\n    // 1. \u5982\u679c\u963b\u585e\u961f\u5217\u91cc\u6709\u4efb\u52a1\uff0c\u90a3\u4e48\u8fd4\u56de\u8be5\u4efb\u52a1\n    // 2. \u5982\u679c\u963b\u585e\u961f\u5217\u91cc\u6ca1\u4efb\u52a1\uff0c\u90a3\u4e48\u5e94\u8be5\u963b\u585e\u7b49\u5f85\u961f\u5217\u91cc\u7684\u4efb\u52a1\n    // 3. \u5982\u679c\u5224\u65ad\u5f53\u524d worker \u9700\u8981\u88ab\u56de\u6536\uff0c\u90a3\u4e48\u8fd4\u56de null\n    for (;;) {\n        int c = ctl.get();\n        int rs = runStateOf(c);\n\n        // Check if queue empty only if necessary.\n        // \u9884\u671f3\uff1a\u5224\u65ad\u72b6\u6001\uff0c\u53ef\u4ee5\u56de\u6536\u5e76\u8fd4\u56de null\n        if (rs >= SHUTDOWN && (rs >= STOP || workQueue.isEmpty())) {\n            decrementWorkerCount();\n            return null;\n        }\n        // \u5f53\u524d\u5de5\u4f5c\u7ebf\u7a0b\u7684\u6570\u76ee\n        int wc = workerCountOf(c);\n\n        // Are workers subject to culling?\n        // allowCoreThreadTimeOut \u662f\u5426\u5141\u8bb8\u6838\u5fc3\u7ebf\u7a0b\u4e00\u5403\u4fdd\u6301\n        boolean timed = allowCoreThreadTimeOut || wc > corePoolSize;\n\n        if ((wc > maximumPoolSize || (timed && timedOut))\n            && (wc > 1 || workQueue.isEmpty())) {\n            if (compareAndDecrementWorkerCount(c)) // \u5c1d\u8bd5\u56de\u6536\u5f53\u524d worker\n                return null;\n            continue;\n        }\n        // \u4e0a\u8ff0\u90fd\u4e0d\u6ee1\u8db3\uff0c\u5c31\u5c1d\u8bd5\u4ece\u963b\u585e\u961f\u5217\u4e2d\u83b7\u53d6\u4efb\u52a1 \u9884\u671f1 \u9884\u671f2\n        try {\n            Runnable r = timed ?\n                workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :\n            workQueue.take(); // take() \u4ece\u961f\u5217\u4e2d\u83b7\u53d6\u4e0d\u5230\u4e1c\u897f\u65f6\uff0c\u4f1a\u7b49\u5f85\n            if (r != null)\n                return r;\n            timedOut = true;\n        } catch (InterruptedException retry) {\n            timedOut = false;\n        }\n    }\n}\n"))),Object(o.b)("h2",{id:"threadpoolexecutor-\u5982\u4f55\u5904\u7406\u63d0\u4ea4\u4efb\u52a1"},"ThreadPoolExecutor \u5982\u4f55\u5904\u7406\u63d0\u4ea4\u4efb\u52a1"),Object(o.b)("h3",{id:"execute-\u65b9\u6cd5"},"execute \u65b9\u6cd5"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"/**\n* Executes the given task sometime in the future.  The task\n* may execute in a new thread or in an existing pooled thread.\n*\n* If the task cannot be submitted for execution, either because this\n* executor has been shutdown or because its capacity has been reached,\n* the task is handled by the current {@code RejectedExecutionHandler}.\n*\n* @param command the task to execute\n* @throws RejectedExecutionException at discretion of\n*         {@code RejectedExecutionHandler}, if the task\n*         cannot be accepted for execution\n* @throws NullPointerException if {@code command} is null\n*/\npublic void execute(Runnable command) {\n    if (command == null)\n        throw new NullPointerException();\n    /*\n    * Proceed in 3 steps:\n    *\n    * 1. If fewer than corePoolSize threads are running, try to\n    * start a new thread with the given command as its first\n    * task.  The call to addWorker atomically checks runState and\n    * workerCount, and so prevents false alarms that would add\n    * threads when it shouldn't, by returning false.\n    *\n    * 2. If a task can be successfully queued, then we still need\n    * to double-check whether we should have added a thread\n    * (because existing ones died since last checking) or that\n    * the pool shut down since entry into this method. So we\n    * recheck state and if necessary roll back the enqueuing if\n    * stopped, or start a new thread if there are none.\n    *\n    * 3. If we cannot queue task, then we try to add a new\n    * thread.  If it fails, we know we are shut down or saturated\n    * and so reject the task.\n    */\n    int c = ctl.get();\n    if (workerCountOf(c) < corePoolSize) {\n        if (addWorker(command, true))\n            return;\n        c = ctl.get();\n    }\n    if (isRunning(c) && workQueue.offer(command)) {\n        int recheck = ctl.get();\n        if (! isRunning(recheck) && remove(command))\n            reject(command);\n        else if (workerCountOf(recheck) == 0)\n            addWorker(null, false);\n    }\n    else if (!addWorker(command, false))\n        reject(command);\n}\n")),Object(o.b)("blockquote",null,Object(o.b)("ul",{parentName:"blockquote"},Object(o.b)("li",{parentName:"ul"},"\u5f53\u63d0\u4ea4\u4e00\u4e2a\u4efb\u52a1\uff0c\u7ebf\u7a0b\u6c60\u53ef\u80fd\u4f1a\u521b\u5efa\u4e00\u4e2a\u7ebf\u7a0b\u6765\u5904\u7406\uff0c\u4e5f\u53ef\u80fd\u4f7f\u7528\u5df2\u6709\u7684\u7ebf\u7a0b\u5904\u7406"),Object(o.b)("li",{parentName:"ul"},"\u901a\u8fc7 ",Object(o.b)("inlineCode",{parentName:"li"},"addWorker")," \u65b9\u6cd5\u6765\u5c1d\u8bd5\u5f00\u542f\u65b0\u7ebf\u7a0b")),Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("img",{alt:"image-20210519205444079",src:t(976).default}))),Object(o.b)("h3",{id:"addworker-\u65b9\u6cd5"},"addWorker \u65b9\u6cd5"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"\u9996\u5148\u901a\u8fc7 CAS \u64cd\u4f5c\uff0c\u5982\u679c\u6210\u529f\u8bf4\u660e\u624d\u771f\u7684\u6709\u673a\u4f1a\u521b\u5efa\u65b0\u7684 worker\uff0c\u5219\u8fdb\u5165\u521b\u5efa worker \u7684\u6d41\u7a0b"),Object(o.b)("li",{parentName:"ul"},"\u4e3a\u4e86\u9632\u6b62\u5e76\u53d1\u73af\u5883\u4e0b\u591a\u4e2a\u7ebf\u7a0b\u540c\u65f6\u521b\u5efa worker\uff0c\u7a81\u7834\u7ebf\u7a0b\u6c60\u6838\u5fc3\u7ebf\u7a0b\u6570\u548c\u6700\u5927\u7ebf\u7a0b\u6570\u9650\u5236\uff0c\u56e0\u6b64\u4f7f\u7528\u4e86 \u6210\u5458 ReentrantLock\uff08\u5b9e\u9645\u4e0a CAS \u5c31\u4fdd\u8bc1\u4e86\uff09\uff0c\u4e3b\u8981\u662f\u4fdd\u8bc1 workers \u8fd9\u4e2a HashSet \u7684\u7ebf\u7a0b\u5b89\u5168"),Object(o.b)("li",{parentName:"ul"},"\u7531\u4e8e\u662f CAS \u4e4b\u540e\u53c8\u7528 Lock\uff0c\u56e0\u6b64\u91ca\u653e worker \u7684\u4ee3\u7801\u4e0d\u9700\u8981\u5224\u65ad worker \u6570\u76ee"),Object(o.b)("li",{parentName:"ul"},"\u7ed3\u679c\uff1a\u65b0\u5efa worker \u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff1b\u5bf9 workers \u8fd9\u4e2a HashSet \u8fdb\u884c add \u64cd\u4f5c\u662f\u7ebf\u7a0b\u5b89\u5168\u7684")),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"/**\n* Checks if a new worker can be added with respect to current\n* pool state and the given bound (either core or maximum). If so,\n* the worker count is adjusted accordingly, and, if possible, a\n* new worker is created and started, running firstTask as its\n* first task. This method returns false if the pool is stopped or\n* eligible to shut down. It also returns false if the thread\n* factory fails to create a thread when asked.  If the thread\n* creation fails, either due to the thread factory returning\n* null, or due to an exception (typically OutOfMemoryError in\n* Thread.start()), we roll back cleanly.\n*\n* @param firstTask the task the new thread should run first (or\n* null if none). Workers are created with an initial first task\n* (in method execute()) to bypass queuing when there are fewer\n* than corePoolSize threads (in which case we always start one),\n* or when the queue is full (in which case we must bypass queue).\n* Initially idle threads are usually created via\n* prestartCoreThread or to replace other dying workers.\n*\n* @param core if true use corePoolSize as bound, else\n* maximumPoolSize. (A boolean indicator is used here rather than a\n* value to ensure reads of fresh values after checking other pool\n* state).\n* @return true if successful\n*/\nprivate boolean addWorker(Runnable firstTask, boolean core) {\n    retry:\n    for (;;) {\n        int c = ctl.get();\n        int rs = runStateOf(c);\n\n        // Check if queue empty only if necessary.\n        if (rs >= SHUTDOWN &&\n            ! (rs == SHUTDOWN &&\n               firstTask == null &&\n               ! workQueue.isEmpty()))\n            return false;\n\n        for (;;) {\n            int wc = workerCountOf(c);\n            if (wc >= CAPACITY ||\n                wc >= (core ? corePoolSize : maximumPoolSize))\n                return false;\n            if (compareAndIncrementWorkerCount(c))\n                break retry;\n            c = ctl.get();  // Re-read ctl\n            if (runStateOf(c) != rs)\n                continue retry;\n            // else CAS failed due to workerCount change; retry inner loop\n        }\n    }\n\n    boolean workerStarted = false;\n    boolean workerAdded = false;\n    Worker w = null;\n    try {\n        w = new Worker(firstTask);\n        final Thread t = w.thread;\n        if (t != null) {\n            final ReentrantLock mainLock = this.mainLock;\n            mainLock.lock();\n            try {\n                // Recheck while holding lock.\n                // Back out on ThreadFactory failure or if\n                // shut down before lock acquired.\n                int rs = runStateOf(ctl.get());\n\n                if (rs < SHUTDOWN ||\n                    (rs == SHUTDOWN && firstTask == null)) {\n                    if (t.isAlive()) // precheck that t is startable\n                        throw new IllegalThreadStateException();\n                    workers.add(w);\n                    int s = workers.size();\n                    if (s > largestPoolSize)\n                        largestPoolSize = s;\n                    workerAdded = true;\n                }\n            } finally {\n                mainLock.unlock();\n            }\n            if (workerAdded) {\n                t.start();\n                workerStarted = true;\n            }\n        }\n    } finally {\n        if (! workerStarted)\n            addWorkerFailed(w);\n    }\n    return workerStarted;\n}\n")),Object(o.b)("br",null),Object(o.b)("h1",{id:"\u4e03\u5927\u53c2\u6570"},"\u4e03\u5927\u53c2\u6570"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("inlineCode",{parentName:"p"},"Executors"),"\u5e95\u5c42\u8c03\u7528\u7684\u662f",Object(o.b)("inlineCode",{parentName:"p"},"ThreadPoolExecutor")),Object(o.b)("ul",{parentName:"blockquote"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"ThreadPoolExecutor"),"\u6784\u9020\u65b9\u6cd5\u7684\u4e03\u5927\u53c2\u6570",Object(o.b)("ol",{parentName:"li"},Object(o.b)("li",{parentName:"ol"},Object(o.b)("inlineCode",{parentName:"li"},"int corePoolSize"),"\u2014\u2014\u6838\u5fc3\u7ebf\u7a0b\u6c60\u5927\u5c0f"),Object(o.b)("li",{parentName:"ol"},Object(o.b)("inlineCode",{parentName:"li"},"int maximumPoolSize"),"\u2014\u2014\u6700\u5927\u7ebf\u7a0b\u6c60\u5927\u5c0f"),Object(o.b)("li",{parentName:"ol"},Object(o.b)("inlineCode",{parentName:"li"},"long keepAliveTime"),"\u2014\u2014\u5b58\u6d3b\u65f6\u95f4\u3001\u8d85\u65f6\u6ca1\u4eba\u8c03\u7528\u5c31\u91ca\u653e"),Object(o.b)("li",{parentName:"ol"},Object(o.b)("inlineCode",{parentName:"li"},"TimeUnit unit"),"\u2014\u2014\u65f6\u95f4\u5355\u4f4d"),Object(o.b)("li",{parentName:"ol"},Object(o.b)("inlineCode",{parentName:"li"},"BlockingQueue<Runnable> workQueue"),"\u2014\u2014\u963b\u585e\u961f\u5217"),Object(o.b)("li",{parentName:"ol"},Object(o.b)("inlineCode",{parentName:"li"},"ThreadFactory threadFactory"),"\u2014\u2014\u7ebf\u7a0b\u5de5\u5382\uff0c\u7528\u6765\u521b\u5efa\u7ebf\u7a0b"),Object(o.b)("li",{parentName:"ol"},Object(o.b)("inlineCode",{parentName:"li"},"RejectedExecutionHandler handler)"),"\u2014\u2014\u62d2\u7edd\u7b56\u7565"))))),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"public static ExecutorService newSingleThreadExecutor() {\n    return new FinalizableDelegatedExecutorService\n      (new ThreadPoolExecutor(1, 1,\n                              0L, TimeUnit.MILLISECONDS,\n                              new LinkedBlockingQueue<Runnable>()));\n}\n")),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"public static ExecutorService newFixedThreadPool(int nThreads) {\n    return new ThreadPoolExecutor(nThreads, nThreads,\n                                  0L, TimeUnit.MILLISECONDS,\n                                  new LinkedBlockingQueue<Runnable>());\n}\n")),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"public static ExecutorService newCachedThreadPool() {\n    return new ThreadPoolExecutor(0, Integer.MAX_VALUE,\n                                  60L, TimeUnit.SECONDS,\n                                  new SynchronousQueue<Runnable>());\n}\n")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"ThreadPoolExecutor\u6784\u9020\u65b9\u6cd5")),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"/**\n     * Creates a new {@code ThreadPoolExecutor} with the given initial\n     * parameters.\n     *\n     * @param corePoolSize the number of threads to keep in the pool, even\n     *        if they are idle, unless {@code allowCoreThreadTimeOut} is set\n     * @param maximumPoolSize the maximum number of threads to allow in the\n     *        pool\n     * @param keepAliveTime when the number of threads is greater than\n     *        the core, this is the maximum time that excess idle threads\n     *        will wait for new tasks before terminating.\n     * @param unit the time unit for the {@code keepAliveTime} argument\n     * @param workQueue the queue to use for holding tasks before they are\n     *        executed.  This queue will hold only the {@code Runnable}\n     *        tasks submitted by the {@code execute} method.\n     * @param threadFactory the factory to use when the executor\n     *        creates a new thread\n     * @param handler the handler to use when execution is blocked\n     *        because the thread bounds and queue capacities are reached\n     * @throws IllegalArgumentException if one of the following holds:<br>\n     *         {@code corePoolSize < 0}<br>\n     *         {@code keepAliveTime < 0}<br>\n     *         {@code maximumPoolSize <= 0}<br>\n     *         {@code maximumPoolSize < corePoolSize}\n     * @throws NullPointerException if {@code workQueue}\n     *         or {@code threadFactory} or {@code handler} is null\n     */\npublic ThreadPoolExecutor(int corePoolSize,\n                          int maximumPoolSize,\n                          long keepAliveTime,\n                          TimeUnit unit,\n                          BlockingQueue<Runnable> workQueue,\n                          ThreadFactory threadFactory,\n                          RejectedExecutionHandler handler) {\n    if (corePoolSize < 0 ||\n        maximumPoolSize <= 0 ||\n        maximumPoolSize < corePoolSize ||\n        keepAliveTime < 0)\n      throw new IllegalArgumentException();\n    if (workQueue == null || threadFactory == null || handler == null)\n      throw new NullPointerException();\n    this.acc = System.getSecurityManager() == null ?\n      null :\n    AccessController.getContext();\n    this.corePoolSize = corePoolSize;\n    this.maximumPoolSize = maximumPoolSize;\n    this.workQueue = workQueue;\n    this.keepAliveTime = unit.toNanos(keepAliveTime);\n    this.threadFactory = threadFactory;\n    this.handler = handler;\n}\n")),Object(o.b)("h2",{id:"\u6838\u5fc3\u7ebf\u7a0b\u6c60"},"\u6838\u5fc3\u7ebf\u7a0b\u6c60"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"\u53bb\u94f6\u884c\u53d6\u94b1\uff0c\u94f6\u884c\u67095\u4e2a\u67dc\u53f0\uff0c\u5176\u4e2d2\u4e2a\u6709\u5458\u5de5\u6b63\u5728\u529e\u7406\u4e1a\u52a1\uff0c\u5269\u4e0b3\u4e2a\u6ca1\u4eba\uff0c\u6682\u505c\u529e\u7406"),Object(o.b)("ul",{parentName:"blockquote"},Object(o.b)("li",{parentName:"ul"},"\u6709\u4eba\u7684\u90a3\u4e24\u4e2a\u5c31\u662f\u6838\u5fc3\u7ebf\u7a0b\u6c60\u91cc\u7684\u7ebf\u7a0b"))),Object(o.b)("h2",{id:"\u6700\u5927\u7ebf\u7a0b\u6c60\u5927\u5c0f"},"\u6700\u5927\u7ebf\u7a0b\u6c60\u5927\u5c0f"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"\u94f6\u884c\u7a97\u53e3\u7684\u603b\u6570\uff0c\u5f53\u6240\u6709\u6709\u5458\u5de5\u7684\u67dc\u53f0\u90fd\u5df2\u7ecf\u88ab\u4f7f\u7528\uff0c\u4e14\u94f6\u884c\u7684\u5019\u5ba2\u533a\u4e5f\u6ca1\u4e86\u5ea7\u4f4d\u7684\u65f6\u5019\uff0c\u5c31\u6253\u5f00\u975e\u6838\u5fc3\u7ebf\u7a0b")),Object(o.b)("h2",{id:"\u963b\u585e\u961f\u5217"},"\u963b\u585e\u961f\u5217"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"\u76f8\u5f53\u4e8e\u94f6\u884c\u7684\u5019\u5ba2\u533a\uff08\u90a3\u4e00\u6392\u6905\u5b50\uff09\uff0c\u5047\u8bbe\u67093\u628a\u6905\u5b50"),Object(o.b)("ul",{parentName:"blockquote"},Object(o.b)("li",{parentName:"ul"},"\u7528\u963b\u585e\u961f\u5217\u7684\u5f62\u5f0f\u6765\u8868\u793a\uff0c\u5373\u5927\u5c0f\u4e3a3\u7684\u963b\u585e\u961f\u5217"))),Object(o.b)("h2",{id:"\u5b58\u6d3b\u65f6\u95f4"},"\u5b58\u6d3b\u65f6\u95f4"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"\u94f6\u884c\u5f00\u653e\u4e86\u5168\u90e8\u7a97\u53e3\uff0c\u5ba2\u6237\u4e1a\u52a1\u90fd\u529e\u5b8c\u4e86\uff0c\u4eba\u90fd\u8d70\u4e86\uff0c\u6709\u51e0\u4e2a\u7a97\u53e3\u7a7a\u51fa\u6765\u4e86\uff0c",Object(o.b)("strong",{parentName:"p"},"\u7a7a\u4e86\u4e00\u6bb5\u65f6\u95f4\u540e\uff0c\u8fd8\u662f\u6ca1\u591a\u5c11\u4eba"),"\uff0c\u4e8e\u662f\u51e0\u4e2a\u5de5\u4f5c\u4eba\u5458\u6e9c\u4e86\uff0c\u628a\u7a97\u53e3\u5173\u4e86\uff0c\u53ea\u5269\u4e0b\u4e00\u5f00\u59cb\u7684\u90a32\u4e2a\u7a97\u53e3"),Object(o.b)("ul",{parentName:"blockquote"},Object(o.b)("li",{parentName:"ul"},"\u975e\u6838\u5fc3\u7ebf\u7a0b\uff0c\u8d85\u8fc7\u8fd9\u4e2a\u65f6\u95f4\u5982\u679c\u6ca1\u6709\u88ab\u4f7f\u7528\uff0c\u5c31\u91ca\u653e\uff0c\u4ee5\u8282\u7701\u7cfb\u7edf\u5f00\u9500"))),Object(o.b)("h2",{id:"\u65f6\u95f4\u5355\u4f4d"},"\u65f6\u95f4\u5355\u4f4d"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"\u5b58\u6d3b\u65f6\u95f4\u7684\u65f6\u95f4\u5355\u4f4d\uff0c\u53ef\u4ee5\u662f\u65f6\u3001\u5206\u3001\u79d2\u7b49")),Object(o.b)("h2",{id:"\u7ebf\u7a0b\u5de5\u5382"},"\u7ebf\u7a0b\u5de5\u5382"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"\u7528\u6765\u521b\u5efa\u7ebf\u7a0b\u7684\u5de5\u5382\uff0c\u4e00\u822c\u4e0d\u505a\u6539\u53d8"),Object(o.b)("ul",{parentName:"blockquote"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"Executors.DefaultThreadFactory()")))),Object(o.b)("h2",{id:"\u62d2\u7edd\u7b56\u7565"},"\u62d2\u7edd\u7b56\u7565"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"\u53bb\u94f6\u884c\u53d6\u94b1\uff0c\u6240\u6709\u7a97\u53e3\u548c\u5019\u5ba2\u533a\u5168\u90fd\u6ee1\u4e86\uff0c\u94f6\u884c\u5982\u4f55\u62d2\u7edd\u65b0\u6765\u7684\u4eba\u529e\u7406\u4e1a\u52a1"),Object(o.b)("ul",{parentName:"blockquote"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"interface RejectedExecutionHandler"),"\u6709\u56db\u4e2a\u5b9e\u73b0\u7c7b\uff0c\u5177\u4f53\u770b\u56db\u79cd\u62d2\u7edd\u7b56\u7565"))),Object(o.b)("h1",{id:"\u56db\u79cd\u62d2\u7edd\u7b56\u7565"},"\u56db\u79cd\u62d2\u7edd\u7b56\u7565"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"strong"},"Interface RejectedExecutionHandler"))),Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"\u5b9e\u73b0\u7c7b"),"\uff1a"),Object(o.b)("ol",{parentName:"blockquote"},Object(o.b)("li",{parentName:"ol"},Object(o.b)("inlineCode",{parentName:"li"},"CallerRunsPolicy"),"\n\u54ea\u6765\u7684\u56de\u54ea\u91cc\uff0c\u56de\u5230\u8981\u6c42\u5f00\u542f\u8fd9\u4e2a\u7ebf\u7a0b\u7684\u7ebf\u7a0b\uff0c\u6bd4\u5982\u5728main\u65b9\u6cd5\u4e2d\u5f00\u7ebf\u7a0b\uff0c\u88ab\u62d2\u7edd\uff0c\u5c31\u4f1a\u8ba9main\u7ebf\u7a0b\u8dd1"),Object(o.b)("li",{parentName:"ol"},Object(o.b)("inlineCode",{parentName:"li"},"AbortPolicy"),"\u2014\u2014 ThreadPoolExecutor\u9ed8\u8ba4\u62d2\u7edd\u7b56\u7565\n\u4e0d\u5904\u7406\u65b0\u8bf7\u6c42\uff0c\u629b\u51fa\u5f02\u5e38"),Object(o.b)("li",{parentName:"ol"},Object(o.b)("inlineCode",{parentName:"li"},"DiscardPolicy"),"\n\u4e0d\u5904\u7406\u5fc3\u60c5\u6c42\uff0c\u4e5f\u4e0d\u4f1a\u629b\u51fa\u5f02\u5e38"),Object(o.b)("li",{parentName:"ol"},Object(o.b)("inlineCode",{parentName:"li"},"DiscardOldestPolicy"),"\n\u5c1d\u8bd5\u4e22\u5f03\u6700\u65e9\u7684\u8bf7\u6c42\uff0c\u7136\u540e\u628a\u65b0\u8bf7\u6c42\u653e\u8fdb\u6765\u3002\u7ade\u4e89\u6210\u529f\u5c31\u6267\u884c\u65b0\u7684\uff0c\u7ade\u4e89\u5931\u8d25\u5c31\u4e0d\u54cd\u5e94\u3002\u4e0d\u629b\u51fa\u5f02\u5e38"))),Object(o.b)("h1",{id:"\u4f7f\u7528\u539f\u751fthreadpoolexecutor\u521b\u5efa\u7ebf\u7a0b\u6c60"},"\u4f7f\u7528\u539f\u751fThreadPoolExecutor\u521b\u5efa\u7ebf\u7a0b\u6c60"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"\u6309\u7167\u4e0a\u9762\u7684\u4e3e\u4f8b\u6765\u8bbe\u7f6e\u53c2\u6570"),Object(o.b)("ul",{parentName:"blockquote"},Object(o.b)("li",{parentName:"ul"},"\u6838\u5fc3\u7ebf\u7a0b\u6c60\u5927\u5c0f2"),Object(o.b)("li",{parentName:"ul"},"\u6700\u5927\u7ebf\u7a0b\u6c60\u5927\u5c0f5"),Object(o.b)("li",{parentName:"ul"},"\u963b\u585e\u961f\u5217\u5927\u5c0f\u4e3a3"),Object(o.b)("li",{parentName:"ul"},"\u62d2\u7edd\u7b56\u7565\u4e3aAbort"))),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"\u6d4b\u8bd5\uff1a\u5f005\u4e2a\u7ebf\u7a0b\uff0c\u6839\u636e\u5206\u6790\uff0c2\u4e2a\u7528\u6838\u5fc3\u7ebf\u7a0b\u6c60\u8dd1\uff0c3\u4e2a\u5728\u963b\u585e\u961f\u5217\u91cc\u7b49")),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'@Test\npublic void test4() {\n    //\u4f7f\u7528\u539f\u751fThreadPoolExecutor\u521b\u5efa\u7ebf\u7a0b\u6c60\n    ThreadPoolExecutor threadPool = new ThreadPoolExecutor(2,\n            5,\n            3,\n            TimeUnit.SECONDS,\n            new LinkedBlockingQueue<>(3),\n            Executors.defaultThreadFactory(),\n            new ThreadPoolExecutor.AbortPolicy())\n    try {\n        for (int i = 1; i <= 5; i++) {\n            threadPool.execute(() -> {\n                System.out.println(Thread.currentThread().getName() + " -> running");\n            });\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    } finally {\n        threadPool.shutdown();\n    }\n}\n')),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),"pool-1-thread-2 -> running\npool-1-thread-1 -> running\npool-1-thread-2 -> running\npool-1-thread-2 -> running\npool-1-thread-1 -> running\n")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"\u53ef\u4ee5\u770b\u5230\u786e\u5b9e\u53ea\u7528\u4e86\u4e24\u4e2a\u7ebf\u7a0b\uff0c\u7136\u540e\u590d\u7528\u4ed6\u4eec")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"\u6d4b\u8bd5\uff0c\u5f006\u4e2a\u7ebf\u7a0b\uff0c\u963b\u585e\u961f\u5217\u6ee1\u4e86\uff0c\u591a\u51fa\u6765\u4e00\u4e2a\u8bf7\u6c42\uff0c\u5219\u7ebf\u7a0b\u6c60\u989d\u5916\u5f00\u653e\u4e00\u4e2a\u975e\u6838\u5fc3\u7ebf\u7a0b\u4ee5\u4f9b\u4f7f\u7528")),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'@Test\n  public void test4() {\n      //\u4f7f\u7528\u539f\u751fThreadPoolExecutor\u521b\u5efa\u7ebf\u7a0b\u6c60\n      ThreadPoolExecutor threadPool = new ThreadPoolExecutor(2,\n              5,\n              3,\n              TimeUnit.SECONDS,\n              new LinkedBlockingQueue<>(3),\n              Executors.defaultThreadFactory(),\n              new ThreadPoolExecutor.AbortPolicy())\n      try {\n          for (int i = 1; i <= 6; i++) {\n              threadPool.execute(() -> {\n                  System.out.println(Thread.currentThread().getName() + " -> running");\n              });\n          }\n      } catch (Exception e) {\n          e.printStackTrace();\n      } finally {\n          threadPool.shutdown();\n      }\n  }\n')),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),"pool-1-thread-1 -> running\npool-1-thread-2 -> running\npool-1-thread-1 -> running\npool-1-thread-3 -> running\npool-1-thread-3 -> running\npool-1-thread-2 -> running\n")),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"\u53ef\u4ee5\u770b\u5230\uff0c\u5b9e\u9645\u4f7f\u7528\u7684\u7ebf\u7a0b\u4e3a3\u4e2a\uff0c\u5176\u4e2d2\u4e2a\u6838\u5fc3\uff0c1\u4e2a\u975e\u6838\u5fc3\u662f\u65b0\u5f00\u51fa\u6765\u7684")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"\u5f00 \u4e2a\u7ebf\u7a0b\uff0c\u6309\u7167\u5206\u6790\uff0c\u6700\u59275\u4e2a\u7ebf\u7a0b\uff0c\u963b\u585e\u961f\u5217\u91cc\u80fd\u653e3\u4e2a\uff0c\u6574\u4e2a\u7ebf\u7a0b\u6c60\u80fd\u5904\u7406\u7684\u7ebf\u7a0b\u8bf7\u6c42\u6570\u5c31\u662f5 + 3 = 8\uff0c\u8d85\u8fc78\u5219\u89e6\u53d1\u62d2\u7edd\u7b56\u7565"),Object(o.b)("li",{parentName:"ul"},"\u6839\u636e\u8bbe\u7f6e\u7684\u62d2\u7edd\u7b56\u7565",Object(o.b)("inlineCode",{parentName:"li"},"Abort"),"\uff0c",Object(o.b)("strong",{parentName:"li"},"\u7ebf\u7a0b\u6c60\u4f1a\u629b\u51fa\u5f02\u5e38")),Object(o.b)("li",{parentName:"ul"},"\u5f009\u4e2a\u7ebf\u7a0b"),Object(o.b)("li",{parentName:"ul"},"\u4e3a\u4e86\u9632\u6b62CPU\u8dd1\u7684\u592a\u5feb\u628a\u7528\u5b8c\u7684\u7ebf\u7a0b\u63d0\u524d\u8fd8\u56de\u7ebf\u7a0b\u6c60\u4e86\uff0c\u4e8e\u662f\u8ba9\u6bcf\u4e2a\u7ebf\u7a0b\u7761\u4e00\u4f1a")),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),'@Test\npublic void test4() {\n    //\u4f7f\u7528\u539f\u751fThreadPoolExecutor\u521b\u5efa\u7ebf\u7a0b\u6c60\n    ThreadPoolExecutor threadPool = new ThreadPoolExecutor(2,\n            5,\n            3,\n            TimeUnit.SECONDS,\n            new LinkedBlockingQueue<>(3),\n            Executors.defaultThreadFactory(),\n            new ThreadPoolExecutor.AbortPolicy(\n    try {\n        for (int i = 1; i <= 9; i++) {\n            threadPool.execute(() -> {\n                System.out.println(Thread.currentThread().getName() + " -> running");\n                try {\n                    TimeUnit.MILLISECONDS.sleep(300);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            });\n        }\n    } catch (Exception e) {\n        e.printStackTrace();\n    } finally {\n        threadPool.shutdown();\n    }\n}\n')),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{}),"pool-1-thread-1 -> running\npool-1-thread-2 -> running\npool-1-thread-3 -> running\npool-1-thread-4 -> running\npool-1-thread-5 -> running\njava.util.concurrent.RejectedExecutionException: Task threadPool.Demo01$$Lambda$1/992136656@7960847b rejected from java.util.concurrent.ThreadPoolExecutor@6a6824be[Running, pool size = 5, active threads = 5, queued tasks = 3, completed tasks = 0]\n...\n")),Object(o.b)("h1",{id:"cpu\u5bc6\u96c6\u578b--io\u5bc6\u96c6\u578b"},"CPU\u5bc6\u96c6\u578b | IO\u5bc6\u96c6\u578b"),Object(o.b)("h2",{id:"\u6700\u5927\u7ebf\u7a0b\u6570\u5982\u4f55\u5b9a\u4e49"},"\u6700\u5927\u7ebf\u7a0b\u6570\u5982\u4f55\u5b9a\u4e49"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"CPU\u5bc6\u96c6\u578b")),Object(o.b)("ul",{parentName:"blockquote"},Object(o.b)("li",{parentName:"ul"},"CPU\u4e0a\u6709\u591a\u5c11\u7ebf\u7a0b\u5c31\u5b9a\u4e49\u51e0\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u786c\u4ef6\u7ebf\u7a0b\u6700\u5927\u6548\u7387\uff0c\u53ef\u4ee5\u901a\u8fc7\u4efb\u52a1\u7ba1\u7406\u5668\u67e5\u770b"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"\u5728\u4ee3\u7801\u4e2d\u4f7f\u7528\u4ee3\u7801\u83b7\u53d6CPU\u7ebf\u7a0b\u6570"))),Object(o.b)("pre",{parentName:"blockquote"},Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-java"}),"Runtime.getRuntime().availableProcessors()\n"))),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},Object(o.b)("strong",{parentName:"p"},"IO\u5bc6\u96c6\u578b")),Object(o.b)("ul",{parentName:"blockquote"},Object(o.b)("li",{parentName:"ul"},"\u7a0b\u5e8f\u6709\u591a\u4e2a\u5927\u578b\u4efb\u52a1\uff0c\u5341\u5206\u5360\u7528\u8d44\u6e90"),Object(o.b)("li",{parentName:"ul"},"\u5224\u65ad\u7a0b\u5e8f\u4e2d\u8017\u8d39IO\u8d44\u6e90\u591a\u7684\u7ebf\u7a0b\u6709\u591a\u5c11\u4e2a\uff0c\u7136\u540e\u5c06\u7ebf\u7a0b\u6c60\u6700\u5927\u7ebf\u7a0b\u6570\u8bbe\u7f6e\u7684\u5927\u4e8e\u8fd9\u4e2a\u6570\u4e00\u4e9b\u5373\u53ef\uff0c",Object(o.b)("strong",{parentName:"li"},"\u901a\u5e38\u4e3a2\u500d")))))}b.isMDXComponent=!0},566:function(e,n,t){"use strict";t.d(n,"a",(function(){return s})),t.d(n,"b",(function(){return h}));var r=t(0),a=t.n(r);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=a.a.createContext({}),b=function(e){var n=a.a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},s=function(e){var n=b(e.components);return a.a.createElement(u.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},p=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),s=b(t),p=r,h=s["".concat(i,".").concat(p)]||s[p]||d[p]||o;return t?a.a.createElement(h,l(l({ref:n},u),{},{components:t})):a.a.createElement(h,l({ref:n},u))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=p;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var u=2;u<o;u++)i[u]=t[u];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},975:function(e,n,t){"use strict";t.r(n),n.default=t.p+"assets/images/14-c10d7610a6d84dc938b260a2e1c804a5.png"},976:function(e,n,t){"use strict";t.r(n),n.default=t.p+"assets/images/15-9d734ab6bc64481fddc77efae8a681e3.png"}}]);