(window.webpackJsonp=window.webpackJsonp||[]).push([[89],{145:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return d})),t.d(n,"metadata",(function(){return s})),t.d(n,"rightToc",(function(){return r})),t.d(n,"default",(function(){return c}));var a=t(2),i=t(6),l=(t(0),t(556)),d={slug:"leetcodeLinked",title:"LeetCode\u94fe\u8868",author:"Ban",author_title:"ChangAn University",author_url:"https://ceskykrumlov.gitee.io",author_image_url:"/img/avatar.jpg",tags:["\u7b97\u6cd5","\u6570\u636e\u7ed3\u6784"]},s={permalink:"/blog/leetcodeLinked",source:"@site/blog/2020-03-06-\u94fe\u8868.md",description:"\u94fe\u8868",date:"2020-03-06T00:00:00.000Z",tags:[{label:"\u7b97\u6cd5",permalink:"/blog/tags/\u7b97\u6cd5"},{label:"\u6570\u636e\u7ed3\u6784",permalink:"/blog/tags/\u6570\u636e\u7ed3\u6784"}],title:"LeetCode\u94fe\u8868",readingTime:14.22,truncated:!0,prevItem:{title:"LeetCode\u6808\u3001\u961f\u5217\u4e0e\u5806",permalink:"/blog/leetCodeQueue"},nextItem:{title:"Ubuntu1804_CUDA10.0_Cudnn7.6.3\u6df1\u5ea6\u5b66\u4e60\u73af\u5883\u642d\u5efa",permalink:"/blog/deeplearningEnv"}},r=[{value:"\u94fe\u8868",id:"\u94fe\u8868",children:[{value:"\u94fe\u8868\u57fa\u7840",id:"\u94fe\u8868\u57fa\u7840",children:[]},{value:"206\t\u94fe\u8868\u9006\u5e8f(Easy)",id:"206-\u94fe\u8868\u9006\u5e8feasy",children:[]},{value:"92 \u94fe\u8868\u9006\u5e8f2(Medium)",id:"92-\u94fe\u8868\u9006\u5e8f2medium",children:[]},{value:"160 \u4e24\u4e2a\u94fe\u8868\u7684\u4ea4\u70b9(Easy)",id:"160-\u4e24\u4e2a\u94fe\u8868\u7684\u4ea4\u70b9easy",children:[]},{value:"142 \u94fe\u8868\u6c42\u73af(Medium)",id:"142-\u94fe\u8868\u6c42\u73afmedium",children:[]},{value:"86 \u94fe\u8868\u5212\u5206(Medium)",id:"86-\u94fe\u8868\u5212\u5206medium",children:[]},{value:"138 \u590d\u5236\u5e26\u968f\u673a\u6307\u9488\u7684\u94fe\u8868(hard)",id:"138-\u590d\u5236\u5e26\u968f\u673a\u6307\u9488\u7684\u94fe\u8868hard",children:[{value:"\u6cd51\uff1a map",id:"\u6cd51\uff1a-map",children:[]},{value:"\u6cd52 \u7a7a\u95f4\u8fed\u4ee3\u6cd5\uff08\u5b98\u65b9\u9898\u89e3 \u6cd53\uff09",id:"\u6cd52-\u7a7a\u95f4\u8fed\u4ee3\u6cd5\uff08\u5b98\u65b9\u9898\u89e3-\u6cd53\uff09",children:[]}]},{value:"21 \u5408\u5e76\u4e24\u4e2a\u6392\u5e8f\u94fe\u8868\uff08Easy\uff09",id:"21-\u5408\u5e76\u4e24\u4e2a\u6392\u5e8f\u94fe\u8868\uff08easy\uff09",children:[]},{value:"23 \u5408\u5e76\u591a\u4e2a\u6392\u5e8f\u94fe\u8868(Hard)",id:"23-\u5408\u5e76\u591a\u4e2a\u6392\u5e8f\u94fe\u8868hard",children:[]}]},{value:"\u5efa\u8bae",id:"\u5efa\u8bae",children:[]}],o={rightToc:r};function c(e){var n=e.components,d=Object(i.a)(e,["components"]);return Object(l.b)("wrapper",Object(a.a)({},o,d,{components:n,mdxType:"MDXLayout"}),Object(l.b)("h1",{id:"\u94fe\u8868"},"\u94fe\u8868"),Object(l.b)("h2",{id:"\u94fe\u8868\u57fa\u7840"},"\u94fe\u8868\u57fa\u7840"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-c++"}),'/*\n        \u94fe\u8868\u57fa\u7840\n\n*/\n\nstruct ListNode\n{\n    int value;\n    ListNode *next;\n};\n\nint main()\n{\n    ListNode a;\n    ListNode b;\n    ListNode c;\n    ListNode d;\n    ListNode e;\n\n    a.value = 10;\n    b.value = 20;\n    c.value = 30;\n    d.value = 40;\n    e.value = 50;\n\n    a.next = &b;\n    b.next = &c;\n    c.next = &d;\n    d.next = &e;\n    e.next = NULL;\n\n    ListNode *head = &a;\n\n    while (head)\n    {\n        printf("%d", head->value);\n        head = head->next;\n    }\n\n    system("pause");\n    return 0;\n}\n')),Object(l.b)("h2",{id:"206-\u94fe\u8868\u9006\u5e8feasy"},"206\t\u94fe\u8868\u9006\u5e8f(Easy)"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"LeetCode 206. Reverse Linked List")),Object(l.b)("p",null,"Easy"),Object(l.b)("p",null,"\u5df2\u77e5\u94fe\u8868\u5934\u8282\u70b9\u6307\u9488head\uff0c\u5c06\u94fe\u8868\u9006\u5e8f\uff08\u4e0d\u53ef\u7533\u8bf7\u989d\u5916\u7a7a\u95f4\uff09"),Object(l.b)("p",null,"1 -> 2 -> 3 -> 4 -> 5 -> NULL\n5 -> 4 -> 3 -> 2 -> 1 -> NULL"),Object(l.b)("p",null,Object(l.b)("img",{src:t(676).default})),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-cpp"}),'/*\n        206 \u94fe\u8868\u53cd\u8f6c\n             * Definition for singly-linked list.\n             * struct ListNode {\n             *     int val;\n             *     ListNode *next;\n             *     ListNode(int x) : val(x), next(NULL) {}\n             * };\n\n             ListNode(int x) : val(x) , next(NULL){}\n             \u8868\u793a\u6784\u9020\u51fd\u6570\uff0c\u4f20\u5165\u4e00\u4e2ax\u503c\uff0c\u5c06x\u8d4b\u503c\u7ed9val\uff0c\u5c06NULL\u8d4b\u7ed9next\n\n\n*/\n\nstruct ListNode {\n    int val;            //\u6570\u636e\u57df\n    ListNode *next;         //\u6307\u9488\u57df\n    ListNode(int x) : val(x), next(NULL) {}         //\u6784\u9020\u51fd\u6570\n};\n\nclass Solution {\npublic:                         //\u94fe\u8868\u5934\u8282\u70b9\u6307\u9488\n    ListNode* reverseList(ListNode* head) {\n        //\u521b\u5efa\u4e00\u4e2anew_head\u6307\u9488\uff0c\u6307\u5411\u65b0\u94fe\u8868\u5934\u8282\u70b9\n        ListNode *new_head = NULL;\n        while (head) {\n            ListNode *next = head->next;//\u5907\u4efdhead->next\n            head->next = new_head;//\u66f4\u65b0head-next\n            new_head = head;//\u79fb\u52a8new_head\n\n            head = next;            //\u904d\u5386\u94fe\u8868\n        }\n        //\u8fd4\u56de\u94fe\u8868\u9006\u5e8f\u540e\u7684\u5934\u8282\u70b9\u6307\u9488\n        return new_head;\n    }\n};\n\nint main() {\n    ListNode a(1);\n    ListNode b(2);\n    ListNode c(3);\n    ListNode d(4);\n    ListNode e(5);\n\n    a.next = &b;\n    b.next = &c;\n    c.next = &d;\n    d.next = &e;\n\n    Solution solve;\n\n    ListNode *head = &a;\n\n    while (head) {\n        printf("%d\\n", head->val);\n        head = head->next;\n    }\n\n    head = solve.reverseList(&a);\n    printf("after reverse : \\n");\n\n    while (head) {\n        printf("%d\\n", head->val);\n        head = head->next;\n    }\n\n\n\n    system("pause");\n    return 0;\n}\n')),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"JAVA")),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\npublic class ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n}\n\nclass Solution {\n    public ListNode reverseList(ListNode head) {\n        ListNode currentNode = head;\n        ListNode newHeadNode = null;\n        while (currentNode != null) {\n            ListNode tempNode = currentNode.next;\n            currentNode.next = newHeadNode;\n            newHeadNode = currentNode;\n\n            currentNode = tempNode;\n        }\n\n        return newHeadNode;\n    }\n}\n\n\nclass Test11{\n\n    public static void main(String[] args) {\n        ListNode a = new ListNode(1);\n        ListNode b = new ListNode(2);\n        ListNode c = new ListNode(3);\n        ListNode d = new ListNode(4);\n        ListNode e = new ListNode(5);\n\n        ListNode head = null;\n        head = a;\n        a.next = b;\n        b.next = c;\n        c.next = d;\n        d.next = e;\n\n        while(head!=null){\n            System.out.println(head.val);\n            head = head.next;\n        }\n\n        head = new Solution().reverseList(a);\n\n\n        while(head!=null){\n            System.out.println(head.val);\n            head = head.next;\n        }\n    }\n}\n")),Object(l.b)("h2",{id:"92-\u94fe\u8868\u9006\u5e8f2medium"},"92 \u94fe\u8868\u9006\u5e8f2(Medium)"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"92"),".\u53cd\u8f6c\u4ece\u4f4d\u7f6e m \u5230 n \u7684\u94fe\u8868\u3002\u8bf7\u4f7f\u7528\u4e00\u8d9f\u626b\u63cf\u5b8c\u6210\u53cd\u8f6c\u3002"),Object(l.b)("p",null,"\u8bf4\u660e:\n1 \u2264 m \u2264 n \u2264 \u94fe\u8868\u957f\u5ea6\u3002"),Object(l.b)("p",null,"\u793a\u4f8b:"),Object(l.b)("p",null,"\u8f93\u5165: 1->2->3->4->5->NULL, m = 2, n = 4\n\u8f93\u51fa: 1->4->3->2->5->NULL"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"\u601d\u8def")),Object(l.b)("p",null,Object(l.b)("img",{src:t(677).default}),Object(l.b)("img",{src:t(678).default})),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"\u5173\u8282\u8282\u70b9"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"\u9006\u7f6e\u7aef\u5934\u8282\u70b9\u7684\u524d\u9a71-> \u7ea2\u8272\u8282\u70b9\n\u539f\u672c\u7ea2\u8272\u6307\u5411\u84dd\u8272\uff0c\u73b0\u5728\u7ea2\u8272\u6307\u5411\u7eff\u8272(\u7ea2->\u7eff)"),Object(l.b)("li",{parentName:"ul"},"\u9006\u7f6e\u524d\u5934\u8282\u70b9->\u84dd\u8272\u8282\u70b9\n\u9006\u7f6e\u524d\u7684\u5f00\u59cb\u8282\u70b9 -> \u9006\u7f6e\u540e\u7684\u5c3e\u8282\u70b9\uff0c \u9006\u7f6e\u540e\u5c3e\u8282\u70b9\u6307\u5411\u9006\u7f6e\u7aef\u5c3e\u8282\u70b9\u540e\u7ee7\uff08\u84dd->\u6a59\uff09"),Object(l.b)("li",{parentName:"ul"},"\u9006\u7f6e\u524d\u7684\u5c3e\u8282\u70b9->\u7eff\u8272\u8282\u70b9\n\u9006\u7f6e\u540e\u7684\u5934\u8282\u70b9\uff0c\u9700\u8981\u8ba9\u9006\u7f6e\u6bb5\u5934\u8282\u70b9\u7684\u524d\u9a71\u6307\u5411\u9006\u7f6e\u540e\u7684\u5934\u8282\u70b9(\u7ea2->\u7eff)"),Object(l.b)("li",{parentName:"ul"},"\u9006\u7f6e\u6bb5\u5c3e\u8282\u70b9\u7684\u540e\u7ee7 -> \u6a59\u8272\u8282\u70b9\n\u9006\u7f6e\u540e\uff0c\u84dd\u8272\u8282\u70b9\u6307\u5411\u6a59\u8272\u8282\u70b9(\u84dd->\u6a59)"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"\u6b65\u9aa4"),Object(l.b)("ol",{parentName:"li"},Object(l.b)("li",{parentName:"ol"},"\u627e\u5230",Object(l.b)("strong",{parentName:"li"},"\u9006\u7f6e\u6bb5\u5934\u8282\u70b9\u7684\u524d\u9a71\uff08\u7ea2\uff09"),"\u548c",Object(l.b)("strong",{parentName:"li"},"\u9006\u7f6e\u524d\u5934\u8282\u70b9(\u9006\u7f6e\u540e\u5c3e\u8282\u70b9)\uff08\u84dd\uff09"),"\nhead\u6307\u9488\u5411\u524d\u79fb\u52a8m-1\u4e2a\u4f4d\u7f6e\uff0c\u5c31\u627e\u5230\u4e86\u9006\u7f6e\u524d\u5934\u8282\u70b9\npre_head\uff1a\u8bb0\u5f55head\u6307\u9488\u7684\u524d\u9a71\u8282\u70b9\n\u5c06",Object(l.b)("strong",{parentName:"li"},"\u9006\u7f6e\u524d\u5934\u8282\u70b9(\u84dd\u8272)\u7684\u5730\u5740\u5b58\u5165\u4e34\u65f6\u53d8\u91cfmodify_list_tail"),",\u7528\u6765\u64cd\u4f5c\u9006\u7f6e\u540e\u7684\u5c3e\u8282\u70b9\uff0c\u8ba9\u5b83\u6307\u5411\u9006\u7f6e\u6bb5\u5c3e\u8282\u70b9\u7684\u540e\u7ee7(\u6a59\u8272)"),Object(l.b)("li",{parentName:"ol"},"\u9006\u7f6en-m+1\u4e2a\u8282\u70b9\uff0c\u8bb0\u4e3a\u9006\u7f6e\u957f\u5ea6change_len,\u7528\u7b80\u5355\u9006\u7f6e\u4ee3\u7801\u5b9e\u73b0"),Object(l.b)("li",{parentName:"ol"},"\u5404\u8282\u70b9\u76f8\u8fde\uff0c\u5c06\u9006\u7f6e\u524d\u5934\u8282\u70b9",Object(l.b)("strong",{parentName:"li"},"\u524d\u9a71pre_head"),"\u548c",Object(l.b)("strong",{parentName:"li"},"\u9006\u7f6e\u540e\u7684\u5934\u8282\u70b9new_head"),"\u76f8\u8fde\uff0c",Object(l.b)("strong",{parentName:"li"},"modify_list_tail"),"\u4e0e",Object(l.b)("strong",{parentName:"li"},"head"),"\u76f8\u8fde"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"\u601d\u8003"),Object(l.b)("ol",{parentName:"li"},Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"\u6700\u7ec8\u7ed3\u679c\u5e94\u8be5\u8fd4\u56de\u54ea\u4e00\u4e2a\u8282\u70b9\uff1f"),Object(l.b)("p",{parentName:"li"},"\u5c06\u6700\u5f00\u59cb\u7684head\u8282\u70b9\u8bb0\u4e3a\u7ed3\u679c\u8282\u70b9")),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"\u5982\u679cm=1\uff0c\u9700\u8981\u8003\u8651\u4ec0\u4e48\u7279\u6b8a\u60c5\u51b5\uff1f\n\u4ece\u7b2c\u4e00\u4e2a\u5143\u7d20\u5f00\u59cb\u9006\u7f6e -> pre_head_pointer\u4e3aNULL -> \u7ed3\u679c\u4e3a\u9006\u7f6e\u524d\u7684\u5c3e\u8282\u70b9\uff0c\u9006\u7f6e\u540e\u7684\u5934\u8282\u70b9new_head_pointer")))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"cpp"))),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-c++"}),'#include <iostream>\n\nusing namespace std;\n\n/*\n            *Definition for singly - linked list.\n            * struct ListNode {\n                *int val;\n                *ListNode *next;\n                *ListNode(int x) : val(x), next(NULL) {}\n                *\n            };\n\n*/\n\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode(int x) : val(x), next(NULL) {}\n};\n\nclass Solution {\npublic:\n    ListNode* reverseBetween(ListNode* head, int m, int n) {\n        int change_len = n - m + 1;         //\u9700\u8981\u9006\u7f6e\u7684\u8282\u70b9\u6570\n        ListNode *pre_head_pointer = NULL;  //\u521d\u59cb\u5316\u5f00\u59cb\u9006\u7f6e\u7684\u8282\u70b9\u7684\u524d\u9a71\n        ListNode *result_pointer = head;    //\u6700\u7ec8\u8f6c\u6362\u540e\u7684\u94fe\u8868\u5934\u8282\u70b9\uff0c\u975e\u7279\u6b8a\u60c5\u51b5\u5373\u4e3ahead\n        while (head && --m) {               //\u5c06head\u5411\u524d\u79fb\u52a8m-1\u4e2a\u4f4d\u7f6e\n            //1 \u8bb0\u5f55head\u7684\u524d\u9a71\n            pre_head_pointer = head;\n\n            head = head->next;\n        }\n        //\u5c06Modify_list_tail_pointer\u6307\u5411\u5f53\u524d\u7684head,\u5373\u9006\u7f6e\u540e\u7684\u94fe\u8868\u5c3e\n        ListNode *modify_list_tail_pointer = head;                      \n        ListNode *new_head_pointer = NULL;\n\n        while (head && change_len) {            //\u9006\u7f6echange_len\u4e2a\u8282\u70b9\n            ListNode *next_pointer = head->next;\n            head->next = new_head_pointer;\n            new_head_pointer = head;\n\n            head = next_pointer;\n\n            //2 \u6bcf\u5b8c\u6210\u4e00\u4e2a\u8282\u70b9\u9006\u7f6e,change_len--;\n            change_len--;\n        }\n\n        //3 pre_head -> new_head   |  modify_tail_pointer -> head\n        //\u8fde\u63a5\u9006\u7f6e\u540e\u7684\u8fde\u522b\u7684\u94fe\u8868\u5c3e\u4e0e\u9006\u7f6e\u6bb5\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9\n        modify_list_tail_pointer->next = head;\n\n        if (pre_head_pointer) {             //\u5982\u679cpre_head_pointer\u4e0d\u4e3a\u7a7a\uff0c\u8bf4\u660e\u4e0d\u662f\u4ece\u7b2c\u4e00\u4e2a\u8282\u70b9\u5f00\u59cb\u9006\u7f6e,m>1\n            //4 \u5c06\u9006\u7f6e\u94fe\u8868\u5f00\u59cb\u7684\u8282\u70b9\u524d\u9a71\u548c\u9006\u7f6e\u540e\u7684\u5934\u8282\u70b9\u8fde\u63a5\n            pre_head_pointer->next = new_head_pointer;\n        }\n        else {\n            //5 \u5982\u679cpre_head\u4e3a\u7a7a\uff0c\u8bf4\u660em==1\u4ece\u7b2c\u4e00\u4e2a\u8282\u70b9\u5f00\u59cb\u9006\u7f6e\uff0c\u7ed3\u679c\u5373\u4e3a\u9006\u7f6e\u540e\u7684\u5934\u8282\u70b9\n            result_pointer = new_head_pointer;\n        }\n\n        return result_pointer;\n    }\n};\n\n\n\nint main() {\n    Solution solve;\n\n    ListNode a(1);\n    ListNode b(2);\n    ListNode c(3);\n    ListNode d(4);\n    ListNode e(5);\n\n    ListNode *head_pointer = &a;\n    a.next = &b;\n    b.next = &c;\n    c.next = &d;\n    d.next = &e;\n\n    while (head_pointer) {\n        printf("%d\\n", head_pointer->val);\n        head_pointer = head_pointer->next;\n    }\n\n    head_pointer = solve.reverseBetween(&a, 2, 4);\n\n    while (head_pointer) {\n        printf("%d\\n", head_pointer->val);\n        head_pointer = head_pointer->next;\n    }\n\n    system("pause");\n    return 0;\n}\n')),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"java")),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),'/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode(int x) { val = x; }\n * }\n */\npublic class ListNode {\n    int val;\n    ListNode next;\n\n    ListNode(int x) {\n        val = x;\n    }\n\n}\n\nclass Solution {\n    public ListNode reverseBetween(ListNode head, int m, int n) {\n        int changeLen = n - m + 1;\n        ListNode resultNode = head;\n        ListNode preHeadNode = null;\n\n        while (head != null && --m != 0) {\n            preHeadNode = head;\n            head = head.next;\n        }\n        ListNode modifyListTail = head;\n        ListNode newHeadNode = null;\n\n        while (head != null && changeLen != 0) {\n            ListNode nextNode = head.next;\n            head.next = newHeadNode;\n            newHeadNode = head;\n\n            head = nextNode;\n\n            changeLen--;\n        }\n\n        modifyListTail.next = head;\n\n\n        if (preHeadNode != null) {\n            preHeadNode.next = newHeadNode;\n        } else {\n            resultNode = newHeadNode;\n        }\n\n\n        return resultNode;\n    }\n\n\n}\n\n\nclass Solve {\n\n    public static void main(String[] args) {\n        ListNode a = new ListNode(1);\n        ListNode b = new ListNode(2);\n        ListNode c = new ListNode(3);\n        ListNode d = new ListNode(4);\n        ListNode e = new ListNode(5);\n\n        ListNode head = a;\n        a.next = b;\n        b.next = c;\n        c.next = d;\n        d.next = e;\n\n        while (head != null) {\n            System.out.println(head.val);\n            head = head.next;\n        }\n\n        System.out.println("--------------");\n\n        head = new Solution().reverseBetween(a, 2, 4);\n\n        while (head != null) {\n            System.out.println(head.val);\n            head = head.next;\n        }\n\n    }\n\n}\n')),Object(l.b)("h2",{id:"160-\u4e24\u4e2a\u94fe\u8868\u7684\u4ea4\u70b9easy"},"160 \u4e24\u4e2a\u94fe\u8868\u7684\u4ea4\u70b9(Easy)"),Object(l.b)("p",null,"LeetCode 160"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("p",{parentName:"li"},"\u6cd51 \u4f7f\u7528set"),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-c++"}),"/*\n            \u8981\u6c42\n            1.\u5982\u679c\u4e24\u4e2a\u94fe\u8868\u6ca1\u6709\u4ea4\u70b9,\u8fd4\u56denull\n            2.\u5728\u6c42\u4ea4\u70b9\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u53ef\u7834\u574f\u94fe\u8868\u7684\u7ed3\u6784\u6216\u4fee\u6539\u94fe\u8868\u6570\u636e\u57df\n            3.\u53ef\u4ee5\u786e\u4fdd\u4f20\u5165\u7684\u94fe\u8868A\u548c\u94fe\u8868B\u6ca1\u6709\u4efb\u4f55\u73af\n            4.\u5b9e\u73b0\u7b97\u6cd5\u5c3d\u53ef\u80fd\u4f7f\u65f6\u95f4\u590d\u6742\u5ea6O(n)\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\n\n\n            \u65b9\u6cd51 set\u6cd5\n                1.\u904d\u5386\u94fe\u8868A,\u5c06A\u4e2d\u8282\u70b9\u5bf9\u5e94\u6307\u9488\u63d2\u5165set\n                2.\u904d\u5386\u94fe\u8868B\uff0c\u5c06B\u4e2d\u8282\u70b9\u5bf9\u5e94\u5730\u5740\u6307\u9488\u5728set\u4e2d\u67e5\u627e\n                    \u53d1\u73b0set\u4e2d\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9\u5730\u5740\uff0c\u5373\u4e24\u4e2a\u94fe\u8868\u7684\u4ea4\u70b9\n\n*/\n\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode(int x) : val(x), next(NULL) {}\n};\n\nclass Solution {\npublic:\n    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\n        set<ListNode*> node_set;\n\n        while (headA) {\n            node_set.insert(headA);\n            headA = headA->next;\n        }\n\n        while (headB) {\n            if (node_set.find(headB) != node_set.end()) {\n                return headB;\n            }\n\n            headB = headB->next;\n        }\n\n        return NULL;\n    }\n};\n\n")),Object(l.b)("pre",{parentName:"li"},Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"class Solution {\n    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\n        List<ListNode> nodeList = new ArrayList<ListNode>();\n\n        while (headA != null) {\n            nodeList.add(headA);\n            headA = headA.next;\n        }\n\n        while (headB != null) {\n            if (nodeList.contains(headB)) {\n                return headB;\n            }\n\n            headB = headB.next;\n        }\n\n\n        return null;\n    }\n\n}\n\n\nclass Solve {\n\n    public static void main(String[] args) {\n        ListNode a = new ListNode(2);\n        ListNode b = new ListNode(3);\n\n        a.next = b;\n\n        ListNode result = new Solution().getIntersectionNode(a, b);\n\n        System.out.println(result);\n\n    }\n\n}\n")))),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"\u6cd52  - \u6570\u5b66\u8ba1\u7b97\u6cd5\uff0c \u7a7a\u95f4\u590d\u6742\u5ea6O(1)\n",Object(l.b)("img",{alt:"4",src:t(679).default}))),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-c++"}),"/*\n            \u8981\u6c42\n            1.\u5982\u679c\u4e24\u4e2a\u94fe\u8868\u6ca1\u6709\u4ea4\u70b9,\u8fd4\u56denull\n            2.\u5728\u6c42\u4ea4\u70b9\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u53ef\u7834\u574f\u94fe\u8868\u7684\u7ed3\u6784\u6216\u4fee\u6539\u94fe\u8868\u6570\u636e\u57df\n            3.\u53ef\u4ee5\u786e\u4fdd\u4f20\u5165\u7684\u94fe\u8868A\u548c\u94fe\u8868B\u6ca1\u6709\u4efb\u4f55\u73af\n            4.\u5b9e\u73b0\u7b97\u6cd5\u5c3d\u53ef\u80fd\u4f7f\u65f6\u95f4\u590d\u6742\u5ea6O(n)\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\n\n\n            \u6cd52\n            1.\u8ba1\u7b97\u4e24\u4e2a\u94fe\u8868\u957f\u5ea6\uff0c\u8ba1\u7b97\u591a\u51fa\u6765\u7684\u957f\u5ea6\n            2.\u5c06\u957f\u94fe\u8868\u6307\u9488\u79fb\u52a8\uff0c\u79fb\u52a8\u5230\u4e0e\u77ed\u94fe\u8868\u5bf9\u9f50\n            3.\u53cc\u6307\u9488\u79fb\u52a8\uff0c\u627e\u5230headA==headB\n\n*/\n\nstruct ListNode {\n    int val;\n    ListNode *next;\n    ListNode(int x) : val(x), next(NULL) {}\n};\n\nint get_list_length(ListNode *head) {\n    int len = 0;\n    while (head) {\n        len++;\n        head = head->next;\n    }\n\n    return len;\n}\n\nListNode *forward_long_list(int long_len, int short_len, ListNode *head) {\n    int delta = long_len - short_len;\n    while (head && delta) {\n        head = head->next;\n        delta--;\n    }\n}\n\nclass Solution {\npublic:\n    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {\n        int listA_len = get_list_length(headA);\n        int listB_len = get_list_length(headB);\n\n        if (listA_len > listB_len) {\n            headA = forward_long_list(listA_len, listB_len, headA);\n        }\n        else {\n            headB = forward_long_list(listB_len, listA_len, headB);\n        }\n\n        while (headA && headB) {\n            if (headA == headB) {\n                return headA;\n            }\n\n            headA = headA->next;\n            headB = headB->next;\n        }\n\n    }\n};\n")),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"class Solution {\n    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {\n        int ALen = getListLength(headA);\n        int BLen = getListLength(headB);\n\n        if (ALen > BLen) {\n            headA = getCommonStartNode(ALen, BLen, headA);\n        } else {\n            headB = getCommonStartNode(BLen, ALen, headB);\n        }\n\n        while (headA != null && headB != null) {\n            if (headA.equals(headB)) {\n                return headA;\n            }\n\n            headA = headA.next;\n            headB = headB.next;\n        }\n\n        return null;\n    }\n\n    public int getListLength(ListNode head) {\n        int len = 0;\n        while (head != null) {\n            len++;\n            head = head.next;\n        }\n\n        return len;\n    }\n\n    public ListNode getCommonStartNode(int longLen, int shortLen, ListNode head) {\n        int delta = longLen - shortLen;\n\n        while (head != null && delta != 0) {\n            head = head.next;\n            delta--;\n        }\n\n        return head;\n    }\n\n}\n")),Object(l.b)("h2",{id:"142-\u94fe\u8868\u6c42\u73afmedium"},"142 \u94fe\u8868\u6c42\u73af(Medium)"),Object(l.b)("p",null,"LeetCode 142"),Object(l.b)("p",null,"\u5df2\u77e5\u94fe\u8868\u4e2d\u53ef\u80fd\u5b58\u5728\u73af\uff0c\u82e5\u6709\u73af\u8fd4\u56de\u73af\u8d77\u59cb\u8282\u70b9\uff0c\u5426\u5219\u8fd4\u56deNULL"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"\u6cd5\u4e00\uff0c\u4f7f\u7528Set")),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-c++"}),'class Solution {\npublic:\n    ListNode *deleteCycle(ListNode *head) {\n        set<ListNode*> node_set;\n        while (head) {\n            if (node_set.find(head) != node_set.end()) {  //\u67e5\u627e\u6307\u9488\u662f\u5426\u91cd\u590d\n                return head;        //\u91cd\u590d\u5373\u73af\u8d77\u70b9\n            }\n            node_set.insert(head);      //\u4e0d\u91cd\u590d\uff0c\u52a0\u5165Set\n            head = head->next;          //\u904d\u5386\n        }\n\n        return NULL;                    //\u4ece\u672a\u91cd\u590d\uff0c\u65e0\u73af\n    }\n};\n\n\nint main() {\n\n    ListNode a(1);\n    ListNode b(2);\n    ListNode c(2);\n    ListNode d(3);\n    a.next = &b;\n    b.next = &c;\n    c.next = &d;\n    d.next = &b;\n\n    ListNode *result(0);\n\n    Solution solve;\n\n    result = solve.deleteCycle(&a);\n\n    cout << result;\n\n\n    system("pause");\n    return 0;\n\n}\n')),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"\u6cd52 \uff0c\u5feb\u6162\u6307\u9488\u8d5b\u8dd1\u6cd5",Object(l.b)("strong",{parentName:"li"},"\uff08\u7ecf\u5178\u601d\u60f3\uff09"))),Object(l.b)("p",null,"\u7531\u4e8e\u94fe\u8868\u5b58\u5728\u73af\uff0c\u5219\u5feb\u6307\u9488\u4f1a\u5c06\u6162\u6307\u9488\u5957\u5708; \u5982\u679c\u94fe\u8868\u4e0d\u5b58\u5728\u73af\uff0c\u5219\u5757\u6307\u9488\u65e0\u6cd5\u5957\u73af\u6162\u6307\u9488"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"\u5feb\u6307\u9488\uff1a\u6bcf\u6b21\u904d\u5386\u8d70\u4e24\u6b65"),Object(l.b)("li",{parentName:"ul"},"\u6162\u6307\u9488\uff1a\u6bcf\u6b21\u904d\u5386\u8d70\u4e00\u6b65")),Object(l.b)("p",null,"\u5957\u73af\u5219\u5b58\u5728\u73af->\u53ef\u89e3141\u9898 -> \u4f46142\u9898\u8981\u6c42\u8fd4\u56de\u73af\u8d77\u70b9"),Object(l.b)("p",null,Object(l.b)("img",{alt:"5",src:t(680).default})),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"\u5982\u4f55\u6c42\u51fa\u73af\u8d77\u70b9\uff1f")),Object(l.b)("p",null,Object(l.b)("img",{alt:"6",src:t(681).default})),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-c++"}),"/*\n            \u5feb\u6162\u6307\u9488\u6cd5\n\n*/\n\nclass Solution {\npublic:\n    ListNode *deleteCycle(ListNode *head) {\n        ListNode *fast = head;\n        ListNode *slow = head;\n        ListNode *meet = NULL;\n\n        while (fast) {\n            slow = slow->next;\n            fast = fast->next;    //\u5feb\u6162\u6307\u9488\u5148\u5404\u8d70\u4e00\u6b65\n            if (!fast) {               //fast\u7b49\u4e8e\u7a7a\n                return NULL;\n            }\n            fast = fast->next;\n    \n\n            if (fast == slow) {\n                meet = fast;\n                break;\n            }\n        }\n\n        if (meet == NULL) {\n            return NULL;\n        }\n\n        while (head && meet) {\n            if (head == meet) {\n                return head;\n            }\n\n            head = head->next;\n            meet = meet->next;\n        }\n\n        return NULL;\n    }\n};\n")),Object(l.b)("h2",{id:"86-\u94fe\u8868\u5212\u5206medium"},"86 \u94fe\u8868\u5212\u5206(Medium)"),Object(l.b)("p",null,"Leecode 86 \u5df2\u77e5\u94fe\u8868\u5934\u6307\u9488head\u4e0e\u6570\u503cx\uff0c\u5c06\u6240\u6709\u5c0f\u4e8ex\u7684\u8282\u70b9\u653e\u5728\u5927\u4e8e\u6216\u7b49\u4e8ex\u7684\u8282\u70b9\u524d\uff0c\u4e14\u4fdd\u6301\u8fd9\u4e9b\u8282\u70b9\u7684\u539f\u6765\u7684\u76f8\u5bf9\u4f4d\u7f6e"),Object(l.b)("p",null,Object(l.b)("img",{alt:"7",src:t(682).default})),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"\u8bbe\u7f6e\u4e24\u4e2a\u4e34\u65f6\u8282\u70b9\uff1a")),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"less_head:\t\u53ea\u8981\u9047\u5230\u5c0f\u4e8ex\u7684\u8282\u70b9\uff0c\u5c31\u7528less_ptr\u5c06\u5176\u63d2\u5165less_head"),Object(l.b)("li",{parentName:"ul"},"more_head:  \u540c\u7406\uff0c\u5927\u4e8ex\u5c31\u7528more_ptr\u63d2\u5165more_head")),Object(l.b)("p",null,Object(l.b)("img",{alt:"image-20200221184132320",src:t(683).default})),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"\u6700\u540e\u5c06less_ptr\u6307\u5411\u57df\u8bbe\u7f6e\u4e3amore_head\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\uff0c more_ptr\u7684\u6307\u5411\u57df\u8bbe\u7f6e\u4e3aNULL"),Object(l.b)("li",{parentName:"ul"},"\u8fd4\u56deless_head\u7684next\u57df\u6307\u5411\u7684\u8282\u70b9")),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-c++"}),'class Solution {\npublic:\n    ListNode *partition(ListNode* head, int x) {\n        ListNode less_head(0);                          //\u5b9a\u4e49\u4e24\u4e2a\u4e34\u65f6\u94fe\u8868\u5934\n        ListNode more_head(0);\n        ListNode *less_ptr = &less_head;        //\u5728\u5934\u90e8\u5b9a\u4e49\u4e24\u4e2a\u6307\u9488\n        ListNode *more_ptr = &more_head;\n\n        while (head) {\n            if (head->val < x) {                        //\u5982\u679c\u8f93\u5165\u94fe\u8868\u7684\u5934\u8282\u70b9\u503c\u5c0f\u4e8ex\n                less_ptr->next = head;          //\u5c06\u8be5\u8282\u70b9\u52a0\u5165less_ptr\u6307\u5411\u7684\u94fe\u8868\n                less_ptr = less_ptr->next;      //less_ptr\u5f80\u4e0b\u8d70\n            }\n            else {\n                more_ptr->next = head;\n                more_ptr = more_ptr->next;\n            }\n            head = head->next;                  //\u8f93\u5165\u94fe\u8868\u5f80\u4e0b\u8d70\n        }\n\n        less_ptr->next = more_head.next;        //\u5c06\u5c0f\u4e8e\u94fe\u8868\u7684\u5c3e\u5df4\u63a5\u5230\u5927\u4e8e\u94fe\u8868\u7684\u5934\u4e0a\n        more_ptr->next = NULL;                      //\u5c06\u5927\u4e8e\u94fe\u8868\u7684\u5c3e\u5df4\u7684next\u57df\u8bbe\u7f6e\u4e3aNULL\n        return less_head.next;                          //\u8fd4\u56deless_head\u6307\u5411\u7684\u8282\u70b9\n    }\n};\n\n\nint main() {\n\n    ListNode a(1);\n    ListNode b(4);\n    ListNode c(3);\n    ListNode d(2);\n    ListNode e(5);\n    ListNode f(2);\n    a.next = &b;\n    b.next = &c;\n    c.next = &d;\n    d.next = &e;\n    e.next = &f;\n\n    ListNode *result(0);\n\n    Solution solve;\n\n    result = solve.partition(&a, 3);\n\n    while (result) {\n        cout << result->val;\n        result = result->next;\n    }\n\n\n    system("pause");\n    return 0;\n\n}\n')),Object(l.b)("h2",{id:"138-\u590d\u5236\u5e26\u968f\u673a\u6307\u9488\u7684\u94fe\u8868hard"},"138 \u590d\u5236\u5e26\u968f\u673a\u6307\u9488\u7684\u94fe\u8868(hard)"),Object(l.b)("p",null,"LeetCode 138 Copy List With Random Pointer"),Object(l.b)("p",null,"A linked list is given such that each node contains an additional random pointer which could point to any node in the list or NULL"),Object(l.b)("p",null,"Return a ",Object(l.b)("strong",{parentName:"p"},"deep copy")," of the list"),Object(l.b)("p",null,"The Linked list is represented in the input/output as a list o ",Object(l.b)("inlineCode",{parentName:"p"},"n")," codes. Each node is represented as a pair of ",Object(l.b)("inlineCode",{parentName:"p"},"[val, random_index]")," where:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"val"),": an integer representing ",Object(l.b)("inlineCode",{parentName:"li"},"Node.val")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"random_index"),": the index of the node(range from ",Object(l.b)("inlineCode",{parentName:"li"},"0")," to ",Object(l.b)("inlineCode",{parentName:"li"},"n-1"),") where random pointer points to, or ",Object(l.b)("inlineCode",{parentName:"li"},"NULL")," if it does not point to any node")),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"\u4ec0\u4e48\u662f\u6df1\u62f7\u8d1d\uff1a"),"\u6784\u9020\u751f\u6210\u4e00\u4e2a\u5168\u65b0\u7684\u94fe\u8868\uff0c\u5373\u4f7f\u5c06\u539f\u94fe\u8868\u6bc1\u574f\uff0c\u65b0\u94fe\u8868\u53ef\u72ec\u7acb\u4f7f\u7528"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"\u96be\u70b9\uff1a"),"\u5982\u4f55\u62f7\u8d1d\u539f\u94fe\u8868\u7684\u968f\u673a\u6307\u9488\u5230\u65b0\u94fe\u8868\uff0c\u5982\u4f55\u6784\u5efa\u65b0\u94fe\u8868\u4e2d\u7684\u968f\u673a\u6307\u9488\u3002\n\u5c06\u539f\u94fe\u8868\u7684\u968f\u673a\u6307\u9488\u903b\u8f91\u5173\u7cfb\uff0c\u751f\u6210\u5728\u65b0\u94fe\u8868\u4e2d"),Object(l.b)("h3",{id:"\u6cd51\uff1a-map"},"\u6cd51\uff1a map"),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"\u601d\u8def\uff1a\u4f7f\u7528Map")),Object(l.b)("p",null,"map\u5b9e\u4f8b\uff1a"),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-c++"}),'#include <iostream>\n#include <set>\n#include <map>\n\nusing namespace std;\n\nclass Node {\npublic:\n    int val;\n    Node* next;\n    Node* random;\n\n    Node(int _val) {\n        val = _val;\n        next = NULL;\n        random = NULL;\n    }\n};\n\nint main() {\n    //\u5c06\u8282\u70b9\u5730\u5740\u4e0e\u6574\u6570\u503c\u8fdb\u884c\u6620\u5c04\n    map<Node *, int> node_map;\n    Node a(5);\n    Node b(3);\n    Node c(6);\n\n    a.next = &b;\n    b.next = &c;\n    a.random = &c;\n    b.random = &a;\n    c.random = &c;\n    \n    //a\u7684\u5730\u5740\u7f16\u53f7\u4e3a1  b\u7684\u5730\u5740\u7f16\u53f7\u4e3a2  c\u7684\u5730\u5740\u7f16\u53f7\u4e3a3  \u8282\u70b9\u5730\u5740\u4e0e\u8282\u70b9\u7684\u4f4d\u7f6e\u8fdb\u884c\u6620\u5c04\n    node_map[&a] = 1;\n    node_map[&b] = 2;\n    node_map[&c] = 3;\n\n    //\u4e4b\u540e\uff0c\u53ef\u4ee5\u67e5\u770b\u4efb\u610f\u8282\u70b9\u7684\u968f\u5373\u6307\u9488\u662f\u7b2c\u51e0\u4e2a\u4f4d\u7f6e\n    printf("a.random id = %d\\n", node_map[a.random]);\n    printf("b.random id = %d\\n", node_map[b.random]);\n    printf("c.random id = %d\\n", node_map[c.random]);\n\n    system("pause");\n    return 0;\n\n}\n\n')),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"\u601d\u8def\uff1a \u8282\u70b9\u5730\u5740\u4e0e\u8282\u70b9\u5e8f\u53f7\u5bf9\u5e94")),Object(l.b)("p",null,Object(l.b)("img",{alt:"image-20200224155700593",src:t(684).default})),Object(l.b)("p",null,Object(l.b)("strong",{parentName:"p"},"\u96be\u70b9\uff1a"),"  (\u7b2c\u51e0\u4e2a\u6307\u7684\u662f\u4f4d\u7f6e)"),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},"\u539f\u94fe\u8868\u67d0\u8282\u70b9\u7684random\u6307\u9488\u6307\u5411\u4e86",Object(l.b)("strong",{parentName:"li"},"\u7b2c\u51e0\u4e2a"),"\u8282\u70b9"),Object(l.b)("li",{parentName:"ol"},"\u65b0\u94fe\u8868\u4efb\u610f\u67d0\u4e2a\u8282\u70b9\uff0c\u5bf9\u5e94\u4e3a",Object(l.b)("strong",{parentName:"li"},"\u7b2c\u51e0\u4e2a"),"\u8282\u70b9")),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-c++"}),"class Solution {\npublic:\n    Node* copyRandomList(Node* head) {\n        unordered_map<Node *, int> node_map;\n        vector<Node *> node_vector;\n\n        Node *ptr = head;\n        int i = 0;\n\n        while(ptr){\n            node_vector.push_back(new Node(ptr->val));\n            \n            node_map[ptr] = i;\n\n            ptr = ptr->next;\n            i++;\n\n        }\n\n        node_vector.push_back(0);\n\n        ptr = head;\n        i = 0;\n\n        while(ptr){\n            node_vector[i]->next = node_vector[i + 1];\n            if(ptr->random){\n                int  id = node_map[ptr->random];\n                node_vector[i]->random = node_vector[id];\n\n            }\n\n            ptr = ptr->next;\n            i++;\n\n        }\n\n        return node_vector[0];\n    }\n};\n\n")),Object(l.b)("h3",{id:"\u6cd52-\u7a7a\u95f4\u8fed\u4ee3\u6cd5\uff08\u5b98\u65b9\u9898\u89e3-\u6cd53\uff09"},"\u6cd52 \u7a7a\u95f4\u8fed\u4ee3\u6cd5\uff08\u5b98\u65b9\u9898\u89e3 \u6cd53\uff09"),Object(l.b)("p",null,"\u601d\u8def\u67e5\u770b\u5b98\u65b9\u9898\u89e3 \uff0c ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"https://leetcode-cn.com/problems/copy-list-with-random-pointer/solution/fu-zhi-dai-sui-ji-zhi-zhen-de-lian-biao-by-leetcod/"}),"\u5b98\u65b9\u9898\u89e3")),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-java"}),"/*\n// Definition for a Node.\nclass Node {\n    public int val;\n    public Node next;\n    public Node random;\n\n    public Node() {}\n\n    public Node(int _val,Node _next,Node _random) {\n        val = _val;\n        next = _next;\n        random = _random;\n    }\n};\n*/\npublic class Solution {\n  public Node copyRandomList(Node head) {\n\n    if (head == null) {\n      return null;\n    }\n\n    // Creating a new weaved list of original and copied nodes.\n    Node ptr = head;\n    while (ptr != null) {\n\n      // Cloned node\n      Node newNode = new Node(ptr.val);\n\n      // Inserting the cloned node just next to the original node.\n      // If A->B->C is the original linked list,\n      // Linked list after weaving cloned nodes would be A->A'->B->B'->C->C'\n      newNode.next = ptr.next;\n      ptr.next = newNode;\n      ptr = newNode.next;\n    }\n\n    ptr = head;\n\n    // Now link the random pointers of the new nodes created.\n    // Iterate the newly created list and use the original nodes' random pointers,\n    // to assign references to random pointers for cloned nodes.\n    while (ptr != null) {\n      ptr.next.random = (ptr.random != null) ? ptr.random.next : null;\n      ptr = ptr.next.next;\n    }\n\n    // Unweave the linked list to get back the original linked list and the cloned list.\n    // i.e. A->A'->B->B'->C->C' would be broken to A->B->C and A'->B'->C'\n    Node ptr_old_list = head; // A->B->C\n    Node ptr_new_list = head.next; // A'->B'->C'\n    Node head_old = head.next;\n    while (ptr_old_list != null) {\n      ptr_old_list.next = ptr_old_list.next.next;\n      ptr_new_list.next = (ptr_new_list.next != null) ? ptr_new_list.next.next : null;\n      ptr_old_list = ptr_old_list.next;\n      ptr_new_list = ptr_new_list.next;\n    }\n    return head_old;\n  }\n}\n\n")),Object(l.b)("h2",{id:"21-\u5408\u5e76\u4e24\u4e2a\u6392\u5e8f\u94fe\u8868\uff08easy\uff09"},"21 \u5408\u5e76\u4e24\u4e2a\u6392\u5e8f\u94fe\u8868\uff08Easy\uff09"),Object(l.b)("ol",{start:21},Object(l.b)("li",{parentName:"ol"},"Merge Two Sorted Lists")),Object(l.b)("p",null,"Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists"),Object(l.b)("p",null,Object(l.b)("img",{alt:"image-20200224174655517",src:t(685).default})),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-C++"}),'struct ListNode {\n    int val;\n    ListNode *next;\n    ListNode(int x) : val(x), next(NULL) {}\n\n};\n\n\n\nclass Solution {\npublic:\n\n    ListNode *mergeTwoLists(ListNode* l1, ListNode* l2) {\n        ListNode temp_head(0);\n        ListNode *pre = &temp_head;\n\n        while (l1 && l2) {\n            if (l1->val < l2->val) {\n                pre->next = l1;\n                l1 = l1->next;\n            }\n            else {\n                pre->next = l2;\n                l2 = l2->next;\n            }\n            pre = pre->next;\n        }\n\n        if (l1) {       //\u5982\u679cl1\u6709\u5269\u4f59\n            pre->next = l1;\n        }\n\n        if (l2) {       //\u5982\u679cl2\u6709\u5269\u4f59\n            pre->next = l2;\n        }\n\n        return temp_head.next;\n    }\n};\n\n\nint main() {\n    Solution solve;\n\n    // 1 2 4\n    ListNode a1(1);\n    ListNode a2(2);\n    ListNode a3(4);\n    a1.next = &a2;\n    a2.next = &a3;\n\n    // 1 3 4\n    ListNode b1(1);\n    ListNode b2(3);\n    ListNode b3(4);\n    b1.next = &b2;\n    b2.next = &b3;\n\n    // return 1 1 2 3 4 4\n    ListNode* merge_list_head = solve.mergeTwoLists(&a1, &b1);\n\n    while (merge_list_head) {\n        printf("%d\\t", merge_list_head->val);\n        merge_list_head = merge_list_head->next;\n    }\n\n    system("pause");\n    return 0;\n\n}\n')),Object(l.b)("h2",{id:"23-\u5408\u5e76\u591a\u4e2a\u6392\u5e8f\u94fe\u8868hard"},"23 \u5408\u5e76\u591a\u4e2a\u6392\u5e8f\u94fe\u8868(Hard)"),Object(l.b)("p",null,"Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity."),Object(l.b)("p",null,Object(l.b)("img",{alt:"image-20200226172737749",src:t(686).default})),Object(l.b)("p",null,Object(l.b)("img",{alt:"image-20200226174404333",src:t(687).default})),Object(l.b)("p",null,Object(l.b)("img",{alt:"image-20200226175619119",src:t(688).default})),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"\u6cd52\u5b9e\u73b0,\u6392\u5217\u6cd5")),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-c++"}),'#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nstruct ListNode\n{\n    int val;\n    ListNode *next;\n    ListNode(int x) : val(x), next(NULL) {}\n};\n\nbool cmp(const ListNode *a, const ListNode *b)\n{\n    return a->val < b->val;\n}\n\nclass Solution\n{\npublic:\n    ListNode *mergeKLists(vector<ListNode *> &lists)\n    {\n        vector<ListNode *> node_vec;\n        for (int i = 0; i < lists.size(); i++)\n        {\n\n            ListNode *head = lists[i];\n            //\u904d\u5386k\u4e2a\u94fe\u8868\uff0c\u5c06\u8282\u70b9\u53bb\u62ff\u4e0d\u6dfb\u52a0\u5230node_vec\n            while (head)\n            {\n                node_vec.push_back(head);\n                head = head->next;\n            }\n        }\n\n        if (node_vec.size() == 0)\n        {\n            return NULL;\n        }\n        sort(node_vec.begin(), node_vec.end(), cmp);\n\n        for (int i = 1; i < node_vec.size(); i++)\n        {\n            node_vec[i - 1]->next = node_vec[i];\n        }\n        node_vec[node_vec.size() - 1]->next = NULL;\n        return node_vec[0];\n    }\n};\n\nint main()\n{\n    ListNode a1(3);\n    ListNode a2(1);\n    ListNode a3(1);\n\n    ListNode b1(4);\n    ListNode b2(2);\n    ListNode b3(7);\n\n    ListNode c1(9);\n    ListNode c2(3);\n    ListNode c3(5);\n\n    a1.next = &a2;\n    a2.next = &a3;\n\n    b1.next = &b2;\n    b2.next = &b3;\n\n    c1.next = &c2;\n    c2.next = &c3;\n\n    vector<ListNode *> lists;\n\n    lists.push_back(&a1);\n    lists.push_back(&b1);\n    lists.push_back(&c1);\n\n    Solution solve;\n    ListNode *result_ptr = solve.mergeKLists(lists);\n    while (result_ptr)\n    {\n        cout << result_ptr->val << "  ";\n        result_ptr = result_ptr->next;\n    }\n\n    return 0;\n}\n\n')),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"\u6cd53\uff0c\u5206\u6cbb\u6cd5")),Object(l.b)("pre",null,Object(l.b)("code",Object(a.a)({parentName:"pre"},{className:"language-c++"}),'#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nstruct ListNode\n{\n    int val;\n    ListNode *next;\n    ListNode(int x) : val(x), next(NULL) {}\n};\n\nListNode *mergeTwoLists(ListNode *l1, ListNode *l2)\n{\n    ListNode temp_head(0);\n    ListNode *pre = &temp_head;\n\n    while (l1 && l2)\n    {\n        if (l1->val < l2->val)\n        {\n            pre->next = l1;\n            l1 = l1->next;\n        }\n        else\n        {\n            pre->next = l2;\n            l2 = l2->next;\n        }\n        pre = pre->next;\n    }\n\n    if (l1)\n    { //\u5982\u679cl1\u6709\u5269\u4f59\n        pre->next = l1;\n    }\n\n    if (l2)\n    { //\u5982\u679cl2\u6709\u5269\u4f59\n        pre->next = l2;\n    }\n\n    return temp_head.next;\n}\n\nclass Solution\n{\npublic:\n    ListNode *mergeKLists(vector<ListNode *> &lists)\n    {\n        if (lists.size() == 0)\n        {\n            return NULL;\n        }\n\n        if (lists.size() == 1)\n        {\n            return lists[0];\n        }\n\n        if (lists.size() == 2)\n        {\n            return mergeTwoLists(lists[0], lists[1]);\n        }\n\n        int mid = lists.size() / 2; //2\n\n        //\u62c6\u5206lists\u4e3a\u4e24\u4e2a\u5b50lists\n        vector<ListNode *> sub1_lists;\n        vector<ListNode *> sub2_lists;\n\n        for (int i = 0; i < mid; i++)\n        {\n            sub1_lists.push_back(lists[i]);\n        }\n\n        for (int i = mid; i < lists.size(); i++)\n        {\n            sub2_lists.push_back(lists[i]);\n        }\n\n        ListNode *l1 = mergeKLists(sub1_lists);\n        ListNode *l2 = mergeKLists(sub2_lists);\n\n        return mergeTwoLists(l1, l2); //\u5206\u6cbb\n    }\n};\n\nint main()\n{\n    ListNode a1(1);\n    ListNode a2(3);\n    ListNode a3(3);\n\n    ListNode b1(2);\n    ListNode b2(4);\n    ListNode b3(7);\n\n    ListNode c1(3);\n    ListNode c2(5);\n    ListNode c3(9);\n\n    a1.next = &a2;\n    a2.next = &a3;\n\n    b1.next = &b2;\n    b2.next = &b3;\n\n    c1.next = &c2;\n    c2.next = &c3;\n\n    vector<ListNode *> lists;\n\n    lists.push_back(&a1);\n    lists.push_back(&b1);\n    lists.push_back(&c1);\n\n    Solution solve;\n    ListNode *result_ptr = solve.mergeKLists(lists);\n    while (result_ptr)\n    {\n        cout << result_ptr->val << "  ";\n        result_ptr = result_ptr->next;\n    }\n\n    return 0;\n}\n\n')),Object(l.b)("p",null,"162\u5206\u949f"),Object(l.b)("h1",{id:"\u5efa\u8bae"},"\u5efa\u8bae"),Object(l.b)("ol",null,Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"\u5b8c\u5168\u81ea\u4e3b\u91cd\u65b0\u7f16\u5199\u9898\u76ee\u89e3\u7b54")),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"\u5c3d\u91cf\u591a\u7684\u901a\u8fc7\u8fd9\u4e9b\u9898\u76ee")),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"\u91cd\u65b0\u7f16\u5199\u4e00\u8fb9\u9898\u76ee\u5e76\u63d0\u4ea4")),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"\u5728\u7eb8\u4e0a\u5199\u4ee3\u7801\uff0c\u53cd\u590d\u7ec3\u4e60")),Object(l.b)("li",{parentName:"ol"},Object(l.b)("p",{parentName:"li"},"\u5b8c\u6210\u5176\u4ed6leetcode\u94fe\u8868\u9898\u76ee"))))}c.isMDXComponent=!0},556:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return N}));var a=t(0),i=t.n(a);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function d(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?d(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):d(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var o=i.a.createContext({}),c=function(e){var n=i.a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},b=function(e){var n=c(e.components);return i.a.createElement(o.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},u=i.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,d=e.parentName,o=r(e,["components","mdxType","originalType","parentName"]),b=c(t),u=a,N=b["".concat(d,".").concat(u)]||b[u]||p[u]||l;return t?i.a.createElement(N,s(s({ref:n},o),{},{components:t})):i.a.createElement(N,s({ref:n},o))}));function N(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,d=new Array(l);d[0]=u;var s={};for(var r in n)hasOwnProperty.call(n,r)&&(s[r]=n[r]);s.originalType=e,s.mdxType="string"==typeof e?e:a,d[1]=s;for(var o=2;o<l;o++)d[o]=t[o];return i.a.createElement.apply(null,d)}return i.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},676:function(e,n,t){"use strict";t.r(n),n.default=t.p+"assets/images/1-6633fd71f24b1aced4b9e140090fde9b.png"},677:function(e,n,t){"use strict";t.r(n),n.default=t.p+"assets/images/2-22668bb1b0efce73662d2085685b1d96.png"},678:function(e,n,t){"use strict";t.r(n),n.default=t.p+"assets/images/3-b78f07666c83c47280f5d582a8e3960f.png"},679:function(e,n,t){"use strict";t.r(n),n.default=t.p+"assets/images/4-b641edb115d0a649b8c1f6e2dbca4aea.png"},680:function(e,n,t){"use strict";t.r(n),n.default=t.p+"assets/images/5-dd3bc04a82c94beee27b22aea6a5bff2.png"},681:function(e,n,t){"use strict";t.r(n),n.default=t.p+"assets/images/6-c653724f992e251be33f95746f6ade21.png"},682:function(e,n,t){"use strict";t.r(n),n.default=t.p+"assets/images/7-4829cb1ba8bc2b7cd00c5808f107fb58.png"},683:function(e,n,t){"use strict";t.r(n),n.default=t.p+"assets/images/8-32fbd30a9dc757e2279bf39afff176fd.png"},684:function(e,n,t){"use strict";t.r(n),n.default=t.p+"assets/images/9-38819ec16b49d3fe8a7fc9cc3005861a.png"},685:function(e,n,t){"use strict";t.r(n),n.default=t.p+"assets/images/10-082ca0cac8b4af46368c85843d380da5.png"},686:function(e,n,t){"use strict";t.r(n),n.default=t.p+"assets/images/11-59c2e64c931a8a9f3989ddd4a3093af3.png"},687:function(e,n,t){"use strict";t.r(n),n.default=t.p+"assets/images/12-05e498ebc2efccf597653640ec4d60a8.png"},688:function(e,n,t){"use strict";t.r(n),n.default=t.p+"assets/images/13-8e2ea7289cca42b1c4de09e6edb50022.png"}}]);